#+title: org-special-block-extras
#+author: Musa Al-hassy
#+PROPERTY: header-args:emacs-lisp :tangle org-special-block-extras.el
#+options: d:nil
#+EXPORT_FILE_NAME: README
#+macro: blurb Twenty-six new custom block and link types for Emacs' Org-mode ^_^

* HTML & LaTeX Setup :ignore:
  :PROPERTIES:
  :CUSTOM_ID: HTML-LaTeX-Setup
  :END:

#+LATEX_HEADER: \usepackage[hmargin=15mm,top=15mm,bottom=15mm]{geometry}
#+latex_header: \usepackage{newunicodechar}
#+latex_header: \newunicodechar{₀}{\ensuremath{_0}}
#+latex_header: \newunicodechar{₁}{\ensuremath{_1}}
#+latex_header: \newunicodechar{₂}{\ensuremath{_2}}
#+latex_header: \newunicodechar{ₙ}{\ensuremath{_n}}
#+latex_header: \newunicodechar{ᵢ}{\ensuremath{_i}}
#+latex_header: \newunicodechar{′}{'}
#+latex_header: \newunicodechar{⇒}{\ensuremath{\Rightarrow}}

# http://taopeng.me/org-notes-style/
# #
#+HTML_HEAD: <link href="http://alhassy.github.io/next-700-module-systems/prototype/org-notes-style.css" rel="stylesheet" type="text/css" />
* Preamble :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Preamble
  :END:
#+BEGIN_SRC emacs-lisp
;;; org-special-block-extras.el --- Twenty-six new custom blocks for Org-mode   -*- lexical-binding: t; -*-

;; Copyright (c) 2020 Musa Al-hassy

;; Author: Musa Al-hassy <alhassy@gmail.com>
;; Version: 1.0
;; Package-Requires: ((s "1.12.0") (dash "2.16.0") (emacs "24.4"))
;; Keywords: org, blocks, colors, convenience
;; URL: https://alhassy.github.io/org-special-block-extras

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Common operations such as colouring text for HTML and LaTeX
;; backends are provided. Below is an example.
;;
;; #+begin_red org
;; /This/
;;       *text*
;;              _is_
;;                   red!
;; #+end_red
;;
;; This file has been tangled from a literate, org-mode, file;
;; and so contains further examples demonstrating the special
;; blocks it introduces.
;;
;;
;; The system is extensible:
;; Users register a handler ORG-SPECIAL-BLOCK-EXTRAS/TYPE
;; for a new custom block TYPE, which is then invoked.
;; The handler takes three arguments:
;; - CONTENTS: The string contents delimited by the custom block.
;; - BACKEND:  The current exportation backend; e.g., 'html or 'latex.
;; The handler must return a string.

;;; Code:

;; String and list manipulation libraries
;; https://github.com/magnars/dash.el
;; https://github.com/magnars/s.el

(require 's)               ;; “The long lost Emacs string manipulation library”
(require 'dash)            ;; “A modern list library for Emacs”
(require 'dash-functional) ;; Function library; ‘-const’, ‘-compose’, ‘-orfn’, ‘-not’, ‘-partial’, etc.
(require 'subr-x)          ;; Extra Lisp functions; e.g., ‘when-let’.
(require 'cl-lib)          ;; New Common Lisp library; ‘cl-???’ forms.
#+END_SRC
* Example Use
  :PROPERTIES:
  :CUSTOM_ID: Example-Use
  :END:

User type something along the lines of the following.
#+begin_example org
#+begin_red org
/This/
      *text*
             _is_
                  red!
#+end_red
#+end_example

Which generates /red/ text when exported to HTML and LaTeX,
*while supporting Org markup*.

#+begin_quote
This article may be read as a [[https://alhassy.github.io/org-special-block-extras/README.pdf][PDF]] or as [[https://alhassy.github.io/org-special-block-extras/README.html][HTML]] or as pure [[https:/raw.githubusercontent.com/alhassy/org-special-block-extras/master/org-special-block-extras.org][Org]]!
#+end_quote

#+begin_center
( Since we're only considering HTML & LaTeX, the Github rendition of this
article may not render things as desired. )
#+end_center

#+caption: Write Org-markup once, generate for many backends ^_^
[[file:images/colours.jpg]]

#+caption: Displaying thoughts side-by-side ^_^
[[file:images/parallel.png]]
# | ( I use prettify symbols mode ) |

#+caption: “First-class editor comments” In order: Chrome, Emacs Web Wowser, Org source, PDF
[[file:images/edcomm.png]]

#+caption: Visually hiding, folding away, details
[[file:images/details.png]]


The remaining sections are implementation matter.
* Table of Contents :TOC:QUOTE:ignore:
  :PROPERTIES:
  :CUSTOM_ID: Table-of-Contents
  :END:
#+BEGIN_QUOTE
- [[#example-use][Example Use]]
- [[#core-utility][Core Utility]]
- [[#colours][Colours]]
  - [[#examples][Examples]]
- [[#parallel][Parallel]]
- [[#argument-extraction][=:argument:= Extraction]]
- [[#editor-comments][Editor Comments]]
  - [[#examples-1][Examples]]
- [[#folded-details][Folded Details]]
  - [[#example][Example]]
- [[#footnotes][Footnotes]]
#+END_QUOTE

* Core Utility
  :PROPERTIES:
  :CUSTOM_ID: Core-Utility
  :END:
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Core utility

(defun org-special-block-extras--advice (backend blk contents _)
  "Invoke the appropriate custom block handler, if any.

A given custom block BLK has a TYPE extracted from it, then we
send the block CONTENTS along with the current export BACKEND to
the formatting function ORG-SPECIAL-BLOCK-EXTRAS/TYPE if it is
defined, otherwise, we leave the CONTENTS of the block as is.

We also support the seemingly useless blocks that have no
contents at all, not even an empty new line."
  (let* ((type    (nth 1 (nth 1 blk)))
         (handler (intern (format "org-special-block-extras--%s" type))))
    (ignore-errors (apply handler backend (or contents "") nil))))

(advice-add #'org-html-special-block :before-until
            (-partial #'org-special-block-extras--advice 'html))

(advice-add #'org-latex-special-block :before-until
            (-partial #'org-special-block-extras--advice 'latex))
#+END_SRC

* Colours

[[file:images/colours.jpg]]

#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Load support for 19 colour custom blocks

(defvar org-special-block-extras--colors
  '(black blue brown cyan darkgray gray green lightgray lime
          magenta olive orange pink purple red teal violet white
          yellow)
  "Colours that should be available on all systems.")

(loop for colour in org-special-block-extras--colors
      do (eval (read (format
                      "(defun org-special-block-extras--%s (backend contents)
                     (format (pcase backend
                     (`latex \"\\\\begingroup\\\\color{%s}%%s\\\\endgroup\")
                     (`html  \"<div style=\\\"color:%s;\\\">%%s</div>\")
                     (t      \"org-special-block-extras: Unsupported backend\"))
                     contents))"
                      colour colour colour))))
#+END_SRC

** Examples
   :PROPERTIES:
   :CUSTOM_ID: Examples
   :END:
:Examples:
#+BEGIN_SRC emacs-lisp :results value :wrap no
(s-join "\n\n"
(loop for c in org-special-block-extras/colors
      collect (format "#+begin_%s\n This text is %s!\n#+end_%s" c c c)))
#+END_SRC
:End:

#+latex: \newpage
#+begin_black
This text is black!
#+end_black

#+begin_blue
This text is blue!
#+end_blue

#+begin_brown
This text is brown!
#+end_brown

#+begin_cyan
This text is cyan!
#+end_cyan

#+begin_darkgray
This text is darkgray!
#+end_darkgray

#+begin_gray
This text is gray!
#+end_gray

#+begin_green
This text is green!
#+end_green

#+begin_lightgray
This text is lightgray!
#+end_lightgray

#+begin_lime
This text is lime!
#+end_lime

#+begin_magenta
This text is magenta!
#+end_magenta

#+begin_olive
This text is olive!
#+end_olive

#+begin_orange
This text is orange!
#+end_orange

#+begin_pink
This text is pink!
#+end_pink

#+begin_purple
This text is purple!
#+end_purple

#+begin_red
This text is red!
#+end_red

#+begin_teal
This text is teal!
#+end_teal

#+begin_violet
This text is violet!
#+end_violet

#+begin_white
This text is white!
#+end_white

#+begin_yellow
This text is yellow!
#+end_yellow

* Parallel
  :PROPERTIES:
  :CUSTOM_ID: Parallel
  :END:

# 2pt ↦ 0.5pt ?? Maybe use a #+bind? or make column seperator a top-level configurable item?

#+caption: Displaying thoughts side-by-side ^_^
[[file:images/parallel.png]]

#+LATEX_HEADER: \usepackage{multicol}

#+begin_parallel org
_Example:_
#+begin_example org
#+begin_3parallel org
one

#+latex: \columnbreak
two

#+latex: \columnbreak
three
#+end_3parallel
#+end_example

#+latex: \columnbreak
_Yields:_
#+begin_3parallel org
one

#+latex: \columnbreak
two

#+latex: \columnbreak
three
#+end_3parallel
#+end_parallel

| =#+LATEX_HEADER: \usepackage{multicol}= |

I initially used the names =paralell<n>= but names ending with a number did not
inherit highlighting, so I shifted the number to being a prefix instead.
+ For LaTeX, new lines are used to suggest opportunities for column breaks
  and are needed even if explicit columnbreaks are declared.

#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Parallel blocks: parallel<n>[NB] for n:2..5, optionally with ‘N’o ‘b’ar
;; in-between the columns.
;;
;; Common case is to have three columns, and we want to avoid invoking the
;; attribute via org, so making this.

(loop for cols in '("1" "2" "3" "4" "5")
      do (loop for rule in '("solid" "none")
      do (eval (read (concat
"(defun org-special-block-extras--" cols "parallel"
(if (equal rule "solid") "" "NB")
"(backend contents)"
"(format (pcase backend"
"(`html \"<div style=\\\"column-rule-style:" rule ";column-count:" cols ";\\\"%s</div>\")"
"(`latex \"\\\\par \\\\setlength{\\\\columnseprule}{" (if (equal rule "solid") "2" "0") "pt}"
"          \\\\begin{minipage}[t]{\\\\linewidth}"
"          \\\\begin{multicols}{" cols "}"
"          %s"
"          \\\\end{multicols}\\\\end{minipage}\")) contents))")))))

(defalias #'org-special-block-extras--parallel   #'org-special-block-extras--2parallel)
(defalias #'org-special-block-extras--parallelNB #'org-special-block-extras--2parallelNB)
#+END_SRC
#
# Musa: If I use “<div …> %s</div>”, the ‘>’ causes some undesirable whitespace
# in the first column. Hence, omitting it.

#+begin_center
( The [[https://www.gnu.org/software/emacs/manual/html_mono/eww.html][Emacs Web Wowser]], ~M-x eww~, does not display =parallel= environments as
desired. )
#+end_center

* =:argument:= Extraction
  :PROPERTIES:
  :CUSTOM_ID: argument-Extraction
  :END:

#+BEGIN_SRC emacs-lisp
(defun org-special-block-extras--extract-arguments (contents &rest args)
"Get list of CONTENTS string with ARGS lines stripped out and values of ARGS.

Example usage:

    (-let [(contents′ . (&alist 'k₀ … 'kₙ))
           (…extract-arguments contents 'k₀ … 'kₙ)]
          body)

Within ‘body’, each ‘kᵢ’ refers to the ‘value’ of argument
‘:kᵢ:’ in the CONTENTS text and ‘contents′’ is CONTENTS
with all ‘:kᵢ:’ lines stripped out.

+ If ‘:k:’ is not an argument in CONTENTS, then it is assigned value NIL.
+ If ‘:k:’ is an argument in CONTENTS but is not given a value in CONTENTS,
  then it has value the empty string."
  (let ((ctnts contents)
        (values (loop for a in args
                      for regex = (format ":%s:\\(.*\\)" a)
                      for v = (cadr (s-match regex contents))
                      collect (cons a v))))
    (loop for a in args
          for regex = (format ":%s:\\(.*\\)" a)
          do (setq ctnts (s-replace-regexp regex "" ctnts)))
    (cons ctnts values)))
#+END_SRC

* Editor Comments
  :PROPERTIES:
  :CUSTOM_ID: editor-comments
  :END:

“Editor Comments” are intended to be top-level first-class comments in an
article that are inline with the surrounding text and are delimited in such a
way that they are visible but drawing attention.  I first learned about this
idea from Wolfram Kahl ---who introduced me to Emacs many years ago.

In LaTeX, an =edcomm= appears inline with the text surrounding it.
#+begin_edcomm org
:ed: Bobert
org-mode is dope, yo!
:replacewith:
Org-mode is essentially a path toward enlightenment.
#+end_edcomm
Unfortunately, in the HTML rendition, the =edcomm= is its own paragraph and thus
separated by new lines from its surrounding text.

#+caption: In order: Chrome, Emacs Web Wowser, Org source, PDF
[[file:images/edcomm.png]]

| /Any new ---possibly empty--- inner lines in the =edcomm= are desirably preserved/ |

#+BEGIN_SRC emacs-lisp -n -r
(defvar org-special-block-extras-hide-editor-comments nil
  "Should editor comments be shown in the output or not.")

(defun org-special-block-extras--edcomm (backend contents)
"Format CONTENTS as an first-class editor comment according to BACKEND.

The CONTENTS string has two optional argument switches:
1. :ed: ⇒ To declare an editor of the comment.
2. :replacewith: ⇒ [Nullary] The text preceding this clause
   should be replaced by the text after it."
  (-let* (
           ;; Get arguments
           ((contents₁ . (&alist 'ed))
            (org-special-block-extras--extract-arguments contents 'ed))

           ;; Strip out any <p> tags     (ref:inline)
           (_ (setq contents₁ (s-replace-regexp "<p>" "" contents₁)))
           (_ (setq contents₁ (s-replace-regexp "</p>" "" contents₁)))

           ;; Are we in the html backend?
           (html? (equal backend 'html))

           ;; fancy display style
           (boxed (lambda (x)
                    (if html?
                        (concat "<span style=\"border-width:1px"
                                 ";border-style:solid;padding:5px\">"
                                 "<strong>" x "</strong></span>")
                    (concat "\\fbox{\\bf " x "}"))))

           ;; Is this a replacement clause?
           ((this that) (s-split ":replacewith:" contents₁))
           (replacement-clause? that) ;; There is a ‘that’
           (replace-keyword (if html? "&nbsp;<u>Replace:</u>"
                              "\\underline{Replace:}"))
           (with-keyword    (if html? "<u>With:</u>"
                              "\\underline{With:}"))
           (editor (format "[%s:%s"
                           (if (s-blank? ed) "Editor Comment" ed)
                           (if replacement-clause?
                               replace-keyword
                             "")))
           (contents₂ (if replacement-clause?
                          (format "%s %s %s" this
                                  (funcall boxed with-keyword)
                                  that)
                        contents₁))

           ;; “[Editor Comment:”
           (edcomm-begin (funcall boxed editor))
           ;; “]”
           (edcomm-end (funcall boxed "]")))

    (setq org-export-allow-bind-keywords t) ;; So users can use “#+bind” immediately
    (if org-special-block-extras-hide-editor-comments
        ""
      (format (pcase backend
                (`html "<p> %s %s %s</p>")
                (`latex "%s %s %s"))
              edcomm-begin contents₂ edcomm-end))))
#+END_SRC

#+RESULTS:
: org-special-block-extras--edcomm

In the HTML export, the =edcomm= special block is /not/ in-line with the text
surrounding it ---ideally, it would be inline so that existing paragraphs are
not split into multiple paragraphs but instead have an editor's comment
indicating suggested alterations; see [[(inline)][Line (inline)]] above.

** Examples
   :PROPERTIES:
   :CUSTOM_ID: Examples
   :END:

Org-markup is supported, as expected.

All editor comments are disabled by declaring, in your Org file:
#+begin_example org
,#+bind: org-special-block-extras-hide-editor-comments t
#+end_example
The =#+bind:= keyword makes Emacs variables buffer-local during export
---it is evaluated /after/ any =src= blocks. To use it, one must declare in
their Emacs init file the following line, which our ~edcomm~ utility
ensures is true.
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC

| ( Remember to =C-c C-c= the =#+bind= to activate it, the first time it is written. ) |

#+bind: org-special-block-extras-hide-editor-comments nil

*** No optional arguments
    :PROPERTIES:
    :CUSTOM_ID: No-optional-arguments
    :END:

#+begin_edcomm org
/Please/ *change* _this_ section to be more, ya know, professional.
#+end_edcomm

*** Only declaring an =:ed:= ---editor
    :PROPERTIES:
    :CUSTOM_ID: Only-declaring-an-ed-editor
    :END:

#+begin_edcomm org
:ed: Bobert
/Please/ *change* _this_ section to be more, ya know, professional.
#+end_edcomm

#+latex: \vspace{1em}\noindent
Possibly with no contents:
#+begin_edcomm org
:ed: Bobert
#+end_edcomm

*** Empty contents, no editor, nothing
    :PROPERTIES:
    :CUSTOM_ID: Empty-contents-no-editor-nothing
    :END:

#+begin_edcomm org
#+end_edcomm

#+latex: \vspace{1em}\noindent
Possibly with an empty new line:
#+begin_edcomm org

#+end_edcomm

*** With a =:replacewith:= clause
    :PROPERTIES:
    :CUSTOM_ID: With-a-replacewith-clause
    :END:

#+begin_edcomm org
The two-dimensional notation; e.g., $\sum_{i = 0}^n i^2$
:replacewith:
A linear one-dimensional notation; e.g.,
$(\Sigma i : 0..n \;\bullet\; i^2)$
#+end_edcomm

#+latex: \vspace{1em}\noindent
Possibly “malformed” replacement clauses.

1. Forget the thing to be replaced.
   #+begin_edcomm org
:replacewith:
A linear one-dimensional notation; e.g.,
$(\Sigma i : 0..n \;\bullet\; i^2)$
#+end_edcomm

2. Forget the new replacement thing.
   #+begin_edcomm org
The two-dimensional notation; e.g., $\sum_{i = 0}^n i^2$
:replacewith:
#+end_edcomm

3. Completely lost one's train of thought.
   #+begin_edcomm org
:replacewith:
#+end_edcomm

* Folded Details
  :PROPERTIES:
  :CUSTOM_ID: Folded-Details
  :END:

  # Removing the red box that appears in "minted" when using unicode.
  # Src: https://tex.stackexchange.com/questions/343494/minted-red-box-around-greek-characters
  #
  #+LATEX_HEADER: \makeatletter
  #+LATEX_HEADER: \AtBeginEnvironment{minted}{\dontdofcolorbox}
  #+LATEX_HEADER: \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
  #+LATEX_HEADER: \makeatother


#+latex_header: \newunicodechar{𝓃}{\ensuremath{n}}
#+latex_header: \newunicodechar{⋯}{\ensuremath{\cdots}}

+ ‘Conversation-style’ articles, where the author asks the reader questions
  whose answers are “folded away” so the reader can think about the exercise
  before seeing the answer.

+ Hiding boring but important code snippets, such as a list of import
  declarations or a tedious implementation.

| =#+LATEX_HEADER: \usepackage{tcolorbox}= |

#+caption: Visually hiding, folding away, details
[[file:images/details.png]]

#+BEGIN_SRC emacs-lisp -n -r
(defun org-special-block-extras--details (backend contents)
"Format CONTENTS as a ‘folded region’ according to BACKEND.

CONTENTS may have a ‘:title’ argument specifying a title for
the folded region."
(-let* (;; Get arguments
        ((contents′ . (&alist 'title))
         (org-special-block-extras--extract-arguments contents 'title)))
  (when (s-blank? title) (setq title "Details"))
  (setq title (s-trim title))
  (format
   (s-collapse-whitespace ;; Remove the whitespace only in the nicely presented
                          ;; strings below
    (pcase backend
      (`html "<details class=\"code-details\">
                 <summary>
                   <strong>
                     <font face=\"Courier\" size=\"3\" color=\"green\"> %s
                     </font>
                   </strong>
                 </summary>
                 %s
              </details>")
      (`latex "\\begin{quote}
                 \\begin{tcolorbox}[colback=white,sharp corners,boxrule=0.4pt]
                   \\textbf{%s:}
                   %s
                 \\end{tcolorbox}
               \\end{quote}")))
    title contents′)))
#+END_SRC

#+latex_header: \usepackage{tcolorbox}

We could use =\begin{quote}\fbox{\parbox{\linewidth}{\textbf{Details:}
...}}\end{quote}=; however, this does not work well with ~minted~, for coloured
source blocks. Instead, we use ~tcolorbox~.

** Example
   :PROPERTIES:
   :CUSTOM_ID: Example
   :END:
Reductions ---incidentally also called ‘folds’[fn:1]--- embody primitive
recursion and thus computability. For example, what does the following compute
when given a whole number 𝓃?
#+BEGIN_SRC emacs-lisp :tangle no
(-reduce #'/ (number-sequence 1.0 𝓃))
#+END_SRC

#+begin_details org
:title: Solution
Rather than guess-then-check, let's /calculate/!
#+begin_src emacs-lisp :tangle no
  (-reduce #'/ (number-sequence 1.0 𝓃))
= ;; Lisp is strict: Evaluate inner-most expression
  (-reduce #'/ '(1.0 2.0 3.0 … 𝓃))
= ;; Evaluate left-associating reduction
  (/ (/ (/ 1.0 2.0) ⋯) 𝓃)
=;; Arithmetic: (/ (/ a b) c) = (* (/ a b) (/ 1 c)) = (/ a (* b c))
  (/ 1.0 (* 2.0 3.0 … 𝓃))
#+END_SRC
We have thus found that Lisp program to compute the inverse factorial of 𝓃,
i.e., $\frac{1}{𝓃!}$.
#+end_details

Neato, let's do more super cool stuff ^_^

#+begin_tiny
(In the Emacs Web Wowser, folded regions are displayed unfolded similar to
LaTeX.)
#+end_tiny

* Postamble :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Postamble
  :END:
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'org-special-block-extras)

;;; org-special-block-extras.el ends here
#+END_SRC
* COMMENT Etc
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Etc
  :END:

  Likewise, regions surrounded by ‘#+BEGIN_COMMENT’ … ‘#+END_COMMENT’ are not exported.
* COMMENT Images ---How To
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Images-How-To
  :END:

1. =eww-open-file= to open a local HTML file in Emacs
2. Likewise open both the Org source and resulting PDF
3. M-x display-line-numbers-mode to turn off numbers
4. Take screenshot (•̀ᴗ•́)و
* COMMENT MELPA Checks
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-MELPA-Checks
  :END:
1. In Github repo: Create new file ⇒ License.txt ⇒ Select template ⇒ GNU 3
2. Ensure first line ends with: -*- lexical-binding: t; -*-
3. Include appropriate standard keywords;
   #+begin_src emacs-lisp
(pp finder-known-keywords)
   #+end_src

   #+RESULTS:
   #+begin_example
   ((abbrev . "abbreviation handling, typing shortcuts, and macros")
    (bib . "bibliography processors")
    (c . "C and related programming languages")
    (calendar . "calendar and time management tools")
    (comm . "communications, networking, and remote file access")
    (convenience . "convenience features for faster editing")
    (data . "editing data (non-text) files")
    (docs . "Emacs documentation facilities")
    (emulations . "emulations of other editors")
    (extensions . "Emacs Lisp language extensions")
    (faces . "fonts and colors for text")
    (files . "file editing and manipulation")
    (frames . "Emacs frames and window systems")
    (games . "games, jokes and amusements")
    (hardware . "interfacing with system hardware")
    (help . "Emacs help systems")
    (hypermedia . "links between text or other media types")
    (i18n . "internationalization and character-set support")
    (internal . "code for Emacs internals, build process, defaults")
    (languages . "specialized modes for editing programming languages")
    (lisp . "Lisp support, including Emacs Lisp")
    (local . "code local to your site")
    (maint . "Emacs development tools and aids")
    (mail . "email reading and posting")
    (matching . "searching, matching, and sorting")
    (mouse . "mouse support")
    (multimedia . "images and sound")
    (news . "USENET news reading and posting")
    (outlines . "hierarchical outlining and note taking")
    (processes . "processes, subshells, and compilation")
    (terminals . "text terminals (ttys)")
    (tex . "the TeX document formatter")
    (tools . "programming tools")
    (unix . "UNIX feature interfaces and emulators")
    (vc . "version control")
    (wp . "word processing"))
   #+end_example
4. Use #' instead of ' for function symbols
5. Use ‘-’ as a separator, not ‘/’.
6. Consider reading:
   https://github.com/bbatsov/emacs-lisp-style-guide#the-emacs-lisp-style-guide
7. =M-x checkdoc= on the lisp file to ensure it passes expected style issues.
   - Symbols =nil, t= should not appear in single quotes.
8. Ensure it byte-compiles without any problems.
9. Ensure that package-linter raises no issues; i.e., the following has no result.
    #+BEGIN_SRC emacs-lisp
(use-package package-lint)
(-let [it "org-special-block-extras.el"]
 (ignore-errors (kill-buffer it))
 (find-file-other-window it)
 (package-lint-buffer it))
#+END_SRC
10. Create a recipe file by invoking: M-x package-build-create-recipe
    - Place it in: melpa/recipes/
    - The name of the file should be the name of the package, no extension.

       #+BEGIN_SRC emacs-lisp :tangle ~/melpa/recipes/org-special-block-extras
    (org-special-block-extras :fetcher github :repo "alhassy/org-special-block-extras")
    #+END_SRC
11. Ensure the recipe builds successfully:
    #+BEGIN_SRC shell
    cd ~/melpa; rm ~/melpa/packages/org-special-block-extras-*; make recipes/org-special-block-extras
    #+END_SRC

    #+RESULTS:
    : • Building package org-special-block-extras ...

12. Ensure the package installs properly from within Emacs:

      #+BEGIN_SRC emacs-lisp
(package-install-file "~/melpa/packages/org-special-block-extras-20200417.238.el")
#+END_SRC
      #+RESULTS:
      : #s(package-desc org-special-block-extras (20200417 238) "Twenty-four new custom blocks for Org-mode" ((s (1 12 0)) (dash (2 16 0)) (emacs (24 4))) single nil nil ((:authors ("Musa Al-hassy" . "alhassy@gmail.com")) (:maintainer "Musa Al-hassy" . "alhassy@gmail.com") (:url . "https://alhassy.github.io/org-special-block-extras")) nil)

12. [@12] Produce a dedicated pull request branch

    #+begin_src emacs-lisp
    (magit-status "~/melpa")
    #+end_src

    + Now =b c= to checkout a new branch.
    + Push this branch on your melpa fork.
    + Go to the https://github.com/melpa/ repo and
      there'll be a big green PR button ^_^
* COMMENT Making ~README.org~
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Making-README-org
  :END:

  Evaluate the following source block with ~C-c C-c~ to produce a ~README~ file.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.org
     # HTML: <h1> Easily Making CheatSheets with Org-mode </h1>
     ,#+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     {{{blurb}}}

    :Hide:
    ,*The listing sheet, as PDF, can be found
     [[file:CheatSheet.pdf][here]]*,
     or as a [[file:CheatSheet_Portrait.pdf][single column portrait]],
     while below is an unruly html rendition.

     # Markdown links: [title](target)
    :End:

     ,#+TOC: headlines 2
     ,#+INCLUDE: org-special-block-extras.org
    ")

    ;; No code execution on export
    ;; ⟪ For a particular block, we use “:eval never-export” ⟫
    ;;
    (let ((org-export-use-babel nil))
      (org-mode)
      ; (org-md-export-to-markdown)
      ; (package-install 'toc-org)
      (toc-org-mode)
      (toc-org-insert-toc)
      (setq org-export-exclude-tags (delete "TOC" org-export-exclude-tags))
      ; (pop org-export-exclude-tags)
      (org-org-export-to-org)
      (add-to-list 'org-export-exclude-tags "TOC")
      )
)
#+END_SRC

#+RESULTS: make-readme
| TOC | noexport |

* Footnotes
  :PROPERTIES:
  :CUSTOM_ID: Footnotes
  :END:

[fn:1] See [[http://www.cs.nott.ac.uk/~pszgmh/fold.pdf][/A tutorial on the universality and expressiveness of fold/]] and
[[http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/urs.pdf][/Unifying Structured Recursion Schemes/]]
