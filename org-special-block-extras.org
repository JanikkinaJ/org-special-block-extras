# -*- eval: (my/execute-startup-blocks) -*-
#+title: org-special-block-extras
#+subtitle:  A unified interface for special blocks and links: defblock
#+author: Musa Al-hassy
#+PROPERTY: header-args:emacs-lisp :tangle org-special-block-extras.el :exports code
#+options: d:nil toc:nil
#+EXPORT_FILE_NAME: index
#+macro: blurb Twenty-nine new custom block and 34 link types for Emacs' Org-mode ^_^

:29_blocks:
21 ‚áí 19 colours and the ‚Äòcolors‚Äô block; & latex-definitions
5  ‚áí parallel blocks
1  ‚áí editorial comments
1  ‚áí details
1  ‚áí documentation
:End:
:34_links:
20 ‚áí 19 colours and the ‚Äòcolors‚Äô type
1  ‚áí editorial comments
1  ‚áí link here
8  ‚áí badges and socials
2  ‚áí doc and show
----
1 ‚áí kbd
1 ‚áí octoicon
:End:

# (progn (load-file "org-special-block-extras.el") (org-special-block-extras-mode))

# +TOC: headlines 2

* HTML & LaTeX Setup :ignore:
  :PROPERTIES:
  :CUSTOM_ID: HTML-LaTeX-Setup
  :END:

# (add-to-list 'org-src-lang-modes '("org" . c))
#+BEGIN_export html
<style>
/* Using source blocks ‚ÄúC‚Äù as alias for Org */
pre.src-C:before { content: 'Org-mode Example!'; }
/* Execute this for alias: (add-to-list 'org-src-lang-modes '("org" . C)) */
</style>
#+END_export

#+latex_header: \usepackage{newunicodechar}

#+macro: newline @@latex: \newline@@

#+latex_header: \newunicodechar{ùí≥}{\ensuremath{\mathcal{X}}}
#+latex_header: \newunicodechar{‚Ñí}{\ensuremath{\mathcal{L}}}
#+LATEX_HEADER: \usepackage[hmargin=15mm,top=15mm,bottom=15mm]{geometry}

#+latex_header: \usepackage{tcolorbox}

#+latex_header: \newunicodechar{œÑ}{\ensuremath{\tau}}
#+latex_header: \newunicodechar{‚ü®}{\ensuremath{\langle}}
#+latex_header: \newunicodechar{‚ü©}{\ensuremath{\rangle}}
#+latex_header: \newunicodechar{‚Üí}{\ensuremath{\to}}
#+latex_header: \newunicodechar{‚äï}{\ensuremath{\oplus}}
#+latex_header: \newunicodechar{‚ÇÄ}{\ensuremath{_0}}
#+latex_header: \newunicodechar{‚ÇÅ}{\ensuremath{_1}}
#+latex_header: \newunicodechar{‚ÇÇ}{\ensuremath{_2}}
#+latex_header: \newunicodechar{‚Çô}{\ensuremath{_n}}
#+latex_header: \newunicodechar{‚Çñ}{\ensuremath{_k}}
#+latex_header: \newunicodechar{·µ¢}{\ensuremath{_i}}
#+latex_header: \newunicodechar{‚Ä≤}{'}
#+latex_header: \newunicodechar{‚áí}{\ensuremath{\Rightarrow}}
#+latex_header: \newunicodechar{ùíû}{\ensuremath{\mathcal{C}}}
#+latex_header: \newunicodechar{‚àà}{\ensuremath{\in}}



#  (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà
#+latex_header: \newunicodechar{Ÿà}{\ensuremath{;}}
#+latex_header: \newunicodechar{‚Ä¢}{\ensuremath{\bullet}}
#+latex_header: \newunicodechar{·¥ó}{\ensuremath{\smile}}
#+latex_header: \newunicodechar{ÃÅ}{\ensuremath{}}
#+latex_header: \newunicodechar{ÃÄ}{\ensuremath{}}
#+latex_header: \newunicodechar{‚Äø}{\ensuremath{\smile}}

#+latex_header: \newunicodechar{‚å£}{\ensuremath{\smile}}
#+latex_header: \newunicodechar{Ãà}{\ensuremath{{}^{..}}}

#+LATEX_HEADER: \usepackage{minted}
# +LATEX_HEADER: \usepackage{tcolorbox}
# +LATEX_HEADER: \usepackage{etoolbox}
# +LATEX_HEADER: \def\mytitle{??? Program Code ???}
# +LATEX_HEADER: \BeforeBeginEnvironment{minted}{\begin{tcolorbox}[title=\hfill \mytitle]}%
# +LATEX_HEADER: \AfterEndEnvironment{minted}{\end{tcolorbox}}%
# #
# Before a code block, write {{{code(title-of-block)}}}
# #
# +MACRO: code     @@latex:\def\mytitle{$1}@@
# #
# let's always break newlines, with a ‚Äò‚Ü™‚Äô indicated new lines.
# emacs-lisp is treated as common-lisp via minted
# +LaTeX: \setminted[common-lisp]{fontsize=\footnotesize, breaklines}
#+LaTeX: \setminted[common-lisp]{breaklines}

# Removing the red box that appears in "minted" when using unicode.
# Src: https://tex.stackexchange.com/questions/343494/minted-red-box-around-greek-characters
#
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \AtBeginEnvironment{minted}{\dontdofcolorbox}
#+LATEX_HEADER: \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
#+LATEX_HEADER: \makeatother

#+latex_header: \newunicodechar{ùìÉ}{\ensuremath{n}}
#+latex_header: \newunicodechar{‚ãØ}{\ensuremath{\cdots}}

# +LATEX_HEADER: \usepackage[dvipsnames]{xcolor} % named colours
#+latex_header: \definecolor{darkblue}{rgb}{0.0, 0.0, 0.55}
#+LATEX_HEADER: \hypersetup{colorlinks,linkcolor=darkblue,citecolor=darkblue,urlcolor=darkblue}

# https://taopeng.me/org-notes-style/
# #
#+HTML_HEAD: <link href="https://alhassy.github.io/next-700-module-systems/prototype/org-notes-style.css" rel="stylesheet" type="text/css" />

# +SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+latex_header:  \usepackage{multicol}
* Lisp Package Preamble                                            :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Preamble
  :END:
#+BEGIN_SRC emacs-lisp  :noweb yes
;;; org-special-block-extras.el --- 29 new custom blocks & 34 link types for Org-mode   -*- lexical-binding: t; -*-

;; Copyright (c) 2020 Musa Al-hassy

;; Author: Musa Al-hassy <alhassy@gmail.com>
;; Version: 1.9
;; Package-Requires: ((s "1.12.0") (dash "2.16.0") (emacs "26.1") (dash-functional "1.2.0") (org "9.1"))
;; Keywords: org, blocks, colors, convenience
;; URL: https://alhassy.github.io/org-special-block-extras

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; In a rush to get this out before EmacsConf2020, some Melpa checks fail; sorry!

;; This library provides common desirable features using the Org interface for
;; blocks and links:
;;
;; 1. Colours: Regions of text and inline text can be coloured using 19 colours;
;;  easily extendable; below is an example.
;;
;;             #+begin_red org
;;             /This/
;;                   *text*
;;                          _is_
;;                               red!
;;             #+end_red
;;
;; 2. Multiple columns: Regions of text are exported into multiple side-by-side
;; columns
;;
;; 3. Remarks: First-class visible editor comments
;;
;; 4. Details: Regions of text can be folded away in HTML
;;
;; 5. ‚Äº BROKEN ‚Äº Badges: SVG badges have the pleasant syntax
;; badge:key|value|colour|url|logo; only the first two are necessary.
;;
;; 6. Tooltips: Full access to Lisp documentation as tooltips, or any other
;; documentation-backend, including user-defined entries; e.g., doc:thread-first
;; retrives the documentation for thread-first and attachs it as a tooltip to
;; the text in the HTML export and as a glossary entry in the LaTeX export
;;
;; This file has been tangled from a literate, org-mode, file; and so contains
;; further examples demonstrating the special blocks it introduces.
;;
;; Full documentation can be found at
;; https://alhassy.github.io/org-special-block-extras

;;; Code:

;; String and list manipulation libraries
;; https://github.com/magnars/dash.el
;; https://github.com/magnars/s.el

(require 's)               ;; ‚ÄúThe long lost Emacs string manipulation library‚Äù
(require 'dash)            ;; ‚ÄúA modern list library for Emacs‚Äù
(require 'subr-x)          ;; Extra Lisp functions; e.g., ‚Äòwhen-let‚Äô.
(require 'cl-lib)          ;; New Common Lisp library; ‚Äòcl-???‚Äô forms.
(require 'dash-functional) ;; Function library; ‚Äò-const‚Äô, ‚Äò-compose‚Äô, ‚Äò-orfn‚Äô,
                           ;; ‚Äò-not‚Äô, ‚Äò-partial‚Äô, etc.

(require 'org)
(require 'ox-latex)
(require 'ox-html)

<<forward-decls>>
#+END_SRC

# ;; Finally, the system is extensible: Users just use defblock!
# ;; ORG-SPECIAL-BLOCK-EXTRAS--TYPE for a new custom block TYPE, which is then
# ;; invoked.  The handler takes three arguments: - CONTENTS: The string contents
# ;; delimited by the custom block.  - BACKEND: The current exportation backend;
# ;; e.g., 'html or 'latex.  The handler must return a string.
#

#+RESULTS:
: ox-html

#
# #

#+BEGIN_SRC emacs-lisp :noweb yes
;;;###autoload
(define-minor-mode org-special-block-extras-mode
    "Provide 29 new custom blocks & 34 link types for Org-mode."
  nil nil nil
  (if org-special-block-extras-mode
      (progn
        <<enable-mode>>
      ) ;; Must be on a new line; I'm using noweb-refs
    <<disable-mode>>
    )) ;; Must be on a new line; I'm using noweb-refs
#+END_SRC

#+RESULTS:

# With noweb, we need those new lines; otherwise in ‚Äúx <<y>> z‚Äù results in every
# line of <<y>> being prefixed by x and postfixed by z.
# #
# See https://github.com/alhassy/emacs.d#what-does-literate-programming-look-like

* Abstract :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Example-Use
  :END:

:Broke_Org_9_4:
#+begin_center

badge:Emacs|23/26/28|green|https://www.gnu.org/software/emacs|gnu-emacs
badge:Org|9.3.6|blue|https://orgmode.org|gnu

#+html: <span>
[[badge:org-special-block-extras|1.2|informational|https://github.com/alhassy/org-special-block-extras|Gnu-Emacs][org-special-block-extras badge]]

#+html: <a href="https://melpa.org/#/org-special-block-extras"><img alt="MELPA" src="https://melpa.org/packages/org-special-block-extras-badge.svg"/></a>
#+html: </span>

[[badge:license|GNU_3|informational|https://www.gnu.org/licenses/gpl-3.0.en.html|read-the-docs][gnu 3 license badge]]
[[badge:docs|literate|success|https://github.com/alhassy/emacs.d#what-does-literate-programming-look-like|read-the-docs][read-the-docs badge]]
tweet:https://github.com/alhassy/org-special-block-extras
badge:contributions|welcome|green|https://github.com/alhassy/org-special-block-extras/issues

badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds
badge:|buy_me_a¬†coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee
#+end_center

:End:
#+begin_export html
<div class="org-center">
<p>

</p>

<p>
<a href="https://www.gnu.org/software/emacs"><img src="https://img.shields.io/badge/Emacs-23%2F26%2F27%2F28-green?logo=gnu-emacs"></a>
<a href="https://orgmode.org"><img src="https://img.shields.io/badge/Org-9.4-blue?logo=gnu"></a>
</p>

<span>
<p>
<a href="https://github.com/alhassy/org-special-block-extras"><img src="https://img.shields.io/badge/org--special--block--extras-1.9-informational?logo=Gnu-Emacs"></a>
</p>

<a href="https://melpa.org/#/org-special-block-extras"><img alt="MELPA" src="https://melpa.org/packages/org-special-block-extras-badge.svg"/></a>
</span>

<p>
<a href="https://www.gnu.org/licenses/gpl-3.0.en.html"><img src="https://img.shields.io/badge/license-GNU_3-informational?logo=read-the-docs"></a>
<a href="https://github.com/alhassy/emacs.d#what-does-literate-programming-look-like"><img src="https://img.shields.io/badge/docs-literate-success?logo=read-the-docs"></a>
<a href="https://twitter.com/intent/tweet?text=This%20looks%20super%20neat%20%28%E2%80%A2%CC%80%E1%B4%97%E2%80%A2%CC%81%29%D9%88%3A:&url=https://github.com/alhassy/org-special-block-extras"><img src="https://img.shields.io/twitter/url?url=https://github.com/alhassy/org-special-block-extras"></a>
<a href="https://github.com/alhassy/org-special-block-extras/issues"><img src="https://img.shields.io/badge/contributions-welcome-green"></a>
</p>

<p>
<a href="https://alhassy.github.io/"><img src="https://img.shields.io/badge/author-musa_al--hassy-purple?logo=nintendo-3ds"></a>
<a href="https://www.buymeacoffee.com/alhassy"><img src="https://img.shields.io/badge/-buy_me_a%C2%A0coffee-gray?logo=buy-me-a-coffee"></a>
</p>
</div>

#+end_export

:Outdated_pics:
#+begin_quote
The full article may be read as a [[https://alhassy.github.io/org-special-block-extras/index.pdf][PDF]] or as [[https://alhassy.github.io/org-special-block-extras][HTML]] ---or visit the [[https://github.com/alhassy/org-special-block-extras][repo]].
Installation instructions are [[#Summary][below]].
#+end_quote

#+caption: Extensibility! /Plug and play support for new block types!/
[[file:images/foo_block.png]]

#+latex: \newpage
/First, a gallery of what's possible!/

| *Write Org-markup once, generate for many backends ^_^* |
[[file:images/colours.jpg]]

[[file:images/colour_links.png]]

#+latex: \newpage
| *Displaying thoughts side-by-side ^_^* |
[[file:images/parallel.png]]
# | ( I use prettify symbols mode ) |

#+latex: \newpage
| *‚ÄúFirst-class editor comments‚Äù In order: Chrome, Emacs Web Wowser, Org source, PDF* |
[[file:images/edcomm.png]]

#+latex: \newpage
| *Visually hiding, folding away, details* |
[[file:images/details.png]]


# Broke_Org_9_4:
#+latex: \newpage
| *An Emacs interface to https://shields.io/* |
[[file:images/badges.png]]
# :End:
# +latex: \newpage
| *Tooltips for documentation and glossary items --in the browser!* |
[[file:images/tooltips_browser.png]]

# +latex: \newpage
| *Tooltips for documentation and glossary items --in Emacs!* |
[[file:images/tooltips_emacs.png]]

# +latex: \newpage
| *Tooltips for documentation and glossary items --in the PDF!* |
[[file:images/tooltips_pdf.png]]

# +latex: \newpage
| *Declaring documentation-glossary items* |
[[file:images/tooltips_declaration.png]]
:End:

#+begin_center
*Abstract*
#+end_center
#+begin_quote
The aim is to write something once using Org-mode markup
then generate the markup for multiple backends.
That is, /*write once, generate many!*/

In particular, we are concerned with /‚Äòcustom‚Äô, or ‚Äòspecial‚Äô, blocks/ which
delimit how a particular region of text is supposed to be formatted according to
the possible export backends.  In some sense, special blocks are meta-blocks.
Rather than writing text in, say, LaTeX environments using LaTeX commands or in
HTML =div='s using HTML tags, we promote using Org-mode markup in special blocks
---Org markup cannot be used explicitly within HTML or LaTeX environments.


/Special blocks/, like ~centre~ and ~quote~, allow us to use Org-mode as the primary
interface regardless of whether the final result is an HTML or PDF article;
sometime we need to make our own special blocks to avoid a duplication of
effort.  However, this can be difficult and may require familiarity with
relatively advanced ELisp concepts, such as macros and hooks; as such, users may
not be willing to put in the time and instead use ad-hoc solutions.

#+latex: \vspace{1em}
We present a new macro, [[doc:org-special-block-extras--defblock][defblock]], which is similar in-spirit to Lisp's standard
doc:defun except that where the latter defines functions, ours defines new
special blocks for Emacs' Org-mode ---as well as, simultaneously, defining new
Org link types. Besides the macro, the primary contribution of this effort is an
interface for special blocks that /admits/ arguments and is familar to Org users
---namely, we ‚Äòtry to reuse‚Äô the familiar ~src~-block interface, including
header-args, but for special blocks.

#+latex: \vspace{1em}
It is hoped that the ease of creating custom special blocks will be a gateway
for many Emacs users to start using Lisp.
#+latex: \iffalse
*[[green:][A 5-page PDF covering ELisp fundamentals]]* can be found *[[https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf][here]]*.
#+latex: \fi

#+latex: \vspace{1em}
# A tutorial on special blocks, link types, and this macro is found in the [[#A-unified-interface-for-special-blocks-and-links-defblock][first
# section]] below. The remaining sections are examples of ~defblock~; namely, the
# construction of the special blocks used in the tutorial ;-)
#
#+latex: \vspace{1em}
#+latex: \textbf{Almost little to no attention has been afforded to making the PDF ‚Äúlook nice‚Äù; consider reading the HTML.}

# Consequently, we extend the number of block types available to the Emacs
# Org-mode user *without forcing the user* to learn HTML or LaTeX.
# Indeed, I am not a web developer and had to learn a number of HTML concepts
# in the process ---the average Org user should not have to do so.
#
# Similarly, we provide a number of ‚Äòlink types‚Äô ~[[linktype:label][description]]~
# for producing in-line coloured text and SVG ‚Äúbadges‚Äù.
#
# We begin with the first two sections serving as mini-tutorials on special blocks
# and on link types. The special block setup we use is /extensible/ in that a new
# block named ~ùíû~ will automatically be supported if the user defines a function
# ~org-special-block-extras--ùíû~ that formats the text of a block.  *The remaining
# sections are literate implementation matter, along with examples and
# screenshots.*
#
# In summary, we provide 20 colour block types and 20 colour link types,
# an ‚Äòeditor comment‚Äô block type as well as a link type,
# a ‚Äòdetails‚Äô block type, a ‚Äòparallel‚Äô multiple columns view block type,
# a ‚Äòlink here‚Äô link type, 8 badge link types,
# and block and link types for making documentation-glossary entries.
# That is, *we provide 29 block types and 34 link types*.
#+end_quote

#+html: <!--
#+latex: \vfill
#+begin_quote
The full article may be read as a [[https://alhassy.github.io/org-special-block-extras/index.pdf][PDF]] or as [[https://alhassy.github.io/org-special-block-extras][HTML]] ---or visit the [[https://github.com/alhassy/org-special-block-extras][repo]].
Installation instructions are [[#Summary][below]].
#+end_quote
#+html: -->

#+latex: \newpage
#+TOC: headlines 2
#+begin_quote
The full article may be read as a [[https://alhassy.github.io/org-special-block-extras/index.pdf][PDF]] or as [[https://alhassy.github.io/org-special-block-extras][HTML]] ---or visit the [[https://github.com/alhassy/org-special-block-extras][repo]].
Installation instructions are [[#Summary][below]].
#+end_quote
#+latex: \newpage

* A unified interface for special blocks and links: ~defblock~
  :PROPERTIES:
  :CUSTOM_ID: A-unified-interface-for-special-blocks-and-links-defblock
  :END:

#  ¬† /How do I make a new special block?/ ---Core Utility

An Org-mode block of type ùí≥ is a bunch of text enclosed in ~#+begin_ùí≥~ and
~#+end_ùí≥~, upon export it modifies the text ---e.g., to center it, or to display
it as code. We show how to make /new/ blocks using a simple interface
---[[doc:org-special-block-extras--defblock][defblock]]--- that lets users treat ùí≥ as a string-valued function in the style
of doc:defun.

The notable features of the system are as follows.

- Familiar ~defun~ syntax for making block ---~defblock~
- Familiar ~src~ syntax for passing arguments ---e.g., ~:key value~
  # - Fine-grained control over export translation phases ‚Äîc.f., ~org-parse~ above
- Modular: New blocks can be made out of existing blocks really quickly using
  ~blockcall~ ---similar to Lisp's ~funcall~.


#+begin_details EmacsConf 2020 Abstract

# From https://emacsconf.org/2020/schedule/22/:

Users will generally only make use of a few predefined /special blocks/, such as
~example, centre, quote~, and will not bother with the effort required to make new
ones. When new encapsulating notions are required, users will either fallback on
HTML or LaTeX specific solutions, usually littered with ~#+ATTR~ clauses to pass
around configurations or parameters.

Efforts have been exerted to mitigate the trouble of producing new special
blocks. However, the issue of passing parameters is still handled in a clumsy
fashion; e.g., by having parameters be expressed in a special block's content
using specific keywords.

We present a novel approach to making special blocks in a familiar fashion and
their use also in a familiar fashion. We achieve the former by presenting
~defblock~, an anaphoric macro exceedingly similar to ~defun~, and for the latter we
mimic the usual ~src~-block syntax for argument passing to support special blocks.

For instance, here is a sample declaration.

#+begin_src emacs-lisp :tangle no
(defblock stutter () (reps 2)
  "Output the CONTENTS of the block REPS many times"
  (org-parse (s-repeat reps contents)))
#+end_src

Here is an invocation that passes an optional argument; which defaults to 2 when
not given.

#+begin_example org
,#+begin_stutter 5
Emacs for the win :-)
,#+end_stutter 5
#+end_example

Upon export, to HTML or LaTeX for instance, the contents of this block are
repeated (/stuttered/) 5 times. The use of ~src~-like invocation may lead to a
decrease in ~#+ATTR~ clauses.

In the presentation, we aim to show a few *practical* special blocks that users
may want: A block that ‚Ä¶

- translates /some selected/ text ---useful for multilingual blogs
- hides /some selected/ text ---useful for learning, quizzes
- folds/boxes text ---useful in blogs for folding away details

In particular, all of these examples will be around ~5 lines long!

We also have a larger collection of more useful block types, already implemented.

The notable features of the system are as follows.

- Familiar ~defun~ syntax for making block ---~defblock~
- Familiar ~src~ syntax for passing arguments ‚Äîe.g., ~:key value~
- Fine-grained control over export translation phases ---c.f., ~org-parse~ above
- Modular: New blocks can be made out of existing blocks really quickly using
  ~blockcall~ ---similar to Lisp's ~funcall~. We will show how to fuse two blocks to
  make a new one, also within ~5 lines.

#+latex: \iffalse
*[[color:blue][It is hoped that the ease of creating custom special blocks will be a gateway for many Emacs users to start using Lisp.]]*
#+latex: \fi

#+end_details

** ¬† /What is a special block?/
   :PROPERTIES:
   :CUSTOM_ID: What-is-a-special-block
   :END:

  An Org mode block is a region of text surrounded by =#+BEGIN_ùí≥ ‚Ä¶ #+END_ùí≥=; they
  serve various purposes as summarised in the table below.  However, we shall
  *use such blocks to execute arbitrary code on their contents*.

  | ùí≥       | Description                                        |
  |---------+----------------------------------------------------|
  | =example= | Format text verbatim, leaving markup as is         |
  | =src=     | Format source code                                 |
  | =center=  | Centre text                                        |
  | =quote=   | Format text as a quotation ---ignore line breaks   |
  | =verse=   | Every line is appended with a line break           |
  | =tiny=    | Render text in a small font; likewise =footnotesize= |
  | =comment= | Completely omit the text from export               |

  - They can be folded and unfolded in Emacs by pressing TAB in the =#+BEGIN= line.
  - The contents of blocks can be highlighted as if they were of language ‚Ñí such
    as =org, html, latex, haskell, lisp, python, ‚Ä¶= by writing =#+BEGIN_ùí≥ ‚Ñí= on the
    starting line, where ~ùí≥~ is the name of the block type.
  - Verbatim environments =src= and =example= may be followed by switch =-n= to
    display line numbers for their contents.

I use [[https://github.com/alhassy/emacs.d#org-mode-templates-a-reason-i-generate-templates-][snippets in my init]] to quickly insert special blocks (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà

#+begin_box
 You can ‚Äòzoom in temporarily‚Äô, /narrowing/ your focus to only on a particular
 block, with doc:org-narrow-to-element, ~C-x n e~, to make your window only show
 the block.  Then use ~C-x n w~ to /widen/ your vision of the buffer's contents.
#+end_box

#+begin_details Warning! Special blocks of the same kind do not nest!
By their very nature, special blocks of /the same name/ cannot be nested ---e.g.,
try to put one ~quote~ block within another and see what (does not) happen.

Moreover, special blocks cannot contain unicode in their names and no
underscore, ‚Äò_‚Äô, in their names; e.g., a special block named ~quote‚ÇÄ~ will
actually refer to ~quote~.
#+end_details

Our goal is to turn Org blocks into LaTeX environments and HTML divs.

Why not use LaTeX or HTML environments directly?
   - Can no longer use Org markup in such settings.
   - Committed to one specific export type.

#+begin_remark Aside
The export syntax =@@backend: ùí≥@@= inserts text ùí≥ literally as-is precisely when
the current backend being exported to is =backend=. This is useful for inserting
=html= snippets or =latex= commands. We can use =@@comment: ùí≥@@= to mimic inline
comments ;-)  ---Since there is [hopefully] no backend named =comment=.
#+end_remark

#+begin_box :background-color blue
#+begin_parallel 3
In general, a ‚Äúspecial block‚Äù such as
   #+begin_example org
   #+begin_ùí≥
   I /love/ Emacs!
   #+end_ùí≥
   #+end_example

#+columnbreak:

   Exports to LaTeX as:
   #+begin_src latex :tangle no :exports code
   \begin{ùí≥}
   I \emph{love} Emacs!
   \end{ùí≥}
   #+end_src

   #+RESULTS:
   #+begin_export latex
   \begin{ùí≥}
      I \emph{love} Emacs!
      \end{ùí≥}
   #+end_export

#+columnbreak:

   Exports to HTML as:
   #+begin_src html :tangle no
   <div class="ùí≥">
   I <em>love</em> Emacs!
   </div>
   #+end_src
#+end_parallel
#+end_box

#+begin_center
/Notice that the standard org markup is also translated according to the export
type./
#+end_center

If the ~ùí≥~ environment exists in a backend ---e.g., by some ~\usepackage{‚ãØ}~ or
manually with {{{newline}}}
~\newenvironment{ùí≥}{‚ãØ}{‚ãØ}~ in LaTeX--- then the file will compile
without error.  Otherwise, you need to ensure it exists ---e.g., by defining the
backend formatting manually yourself.

#+latex: \vspace{1em}
#+begin_remark Aside
LaTeX packages that a user needs consistently are declared in the
{{{newline}}} list ~org-latex-packages-alist~. See its documentation, with ~C-h o~,
to learn more.  To export to your own LaTeX classes, ~C-h o org-latex-classes~.
#+end_remark
#+latex: \vspace{1em}

#+begin_box What is an HTML ‚Äòdiv‚Äô? :background-color pink
A ~div~ tag defines a division or a section in an HTML document that is styled in
a particular fashion or has JavaScript code applied to it.  For example
---placing the following in an ~#+begin_export html ‚ãØ #+end_export~--- results in
a section of text that is editable by the user ---i.e., one can just alter text
in-place--- and its foreground colour is red, while its background colour is
light blue, and it has an uninformative tooltip.
#+begin_parallel
_Source_
#+begin_src html :tangle no
<div contenteditable="true"
     title="woah, a tool tip!"
     style="color:red; background-color:lightblue">
This is some editable text! Click me & type!
</div>
#+end_src

#+html: <br>
_Result_
#+html: <br><br>

#+begin_export html
<div contenteditable="true"
     title="woah, a tool tip!"
     style="color:red; background-color:lightblue">
This is some editable text! Click me & type!
</div>
#+end_export
#+end_parallel
#+end_box

#+begin_box What is a CSS ‚Äòclass‚Äô?
To use a collection of style settings repeatedly, we may declare them in a =class=
---which is just an alias for the ;-separated list of =attribute:value=
pairs. Then our ~div~'s refer to that particular ~class~ name.

#+latex: \vspace{1em}
#+begin_parallel :bar t
For example, in an HTML export block, we may declare the following style class
named ~red~.
#+begin_example org
#+begin_export html
<style>
.red { color:red; }
</style>
#+end_export
#+end_example

#+columnbreak:

Now, the above syntax with ~ùí≥~ replaced by ~red~ works as desired in HTML export:
HTML now knows of a class named ~red~.

#+latex: \vspace{1em}
#+html: <br><hr>
For instance, now this
#+begin_src C :tangle no
,#+begin_red
I /love/ Emacs!
,#+end_red
#+end_src
Results in:
#+begin_red
I /love/ Emacs!
#+end_red
#+html: <hr>

#+latex: \vspace{1em}
This approach, however, will not work if we want to produce LaTeX and so
requires a duplication of efforts. We would need to declare such formatting once
for each backend.

#+end_parallel
#+end_box
** ¬† /How do I make a new link type?/
   :PROPERTIES:
   :CUSTOM_ID: Links
   :END:

#+begin_center
/Sometimes using a block is too verbose and it'd be better to ‚Äòinline‚Äô it; for
this, we use Org's link mechanism./
#+end_center

 Use src_emacs-lisp[:exports code]{(org-link-set-parameters params)} to add a
new link type ---an older obsolete method is =org-add-link-type=.  The list of all
supported link types is =org-link-parameters=; its documentation identifies the
possibilities for =params=.

 Let's produce an example link type, then discuss its code.

 Intended usage:
 Raw use example:salam and descriptive, [[example:hola][using ‚Äòexample‚Äô link type]] ^_^
 [[file:images/example_link.png]]

 # The ‚Äú(ref:ùìçùìçùìç)‚Äù declarations are for line number referencing and not
 # part of the Lisp code needed to produce the example link type.
 # Consult the HTML/PDF rendition of this file or tangle the block below.
 # #
#+name: startup-code
 #+begin_src emacs-lisp -n -r :tangle no
(org-link-set-parameters
  ;; The name of the new link type, usage: ‚Äúexample:label‚Äù
  "example"  (ref:extype)

  ;; When you click on such links, ‚Äúlet me google that for you‚Äù happens
  :follow (lambda (label) (browse-url (concat "https://lmgtfy.com/?q=" label))) (ref:exfollow)

  ;; Upon export, make it a ‚Äúlet me google that for you‚Äù link
  :export (lambda (label description backend)     (ref:exexport)
            (format (pcase backend
                      ('html "<a href=\"%s\">%s</a>")
                      ('latex "\\href{%s}{%s}")
                      (_ "I don‚Äôt know how to export that!"))
                    (concat "https://lmgtfy.com/?q=" label)
                    (or description label)))

  ;; These links should *never* be folded in descriptive display;
  ;; i.e., ‚Äú[[example:lable][description]]‚Äù will always appear verbatim
  ;; and not hide the first pair [‚Ä¶].
  ;; :display 'full (ref:exdisplay)

  ;; The tooltip alongside a link
  :help-echo (lambda (window object position)   (ref:exhelpecho)
               (save-excursion
                 (goto-char position)
                 (-let* (((&plist :path :format :raw-link :contents-begin :contents-end)
                          (cadr (org-element-context)))
                         ;; (org-element-property :path (org-element-context))
                         (description
                          (when (equal format 'bracket)
                            (copy-region-as-kill contents-begin contents-end)
                            (substring-no-properties (car kill-ring)))))
                   (format "‚Äú%s‚Äù :: Let me google ‚Äú%s‚Äù for you -__-"
                          raw-link (or description raw-link)))))

  ;; How should these links be displayed
  :face '(:foreground "red" :weight bold    (ref:exface)
          :underline "orange" :overline "orange"))
 #+end_src

 #+RESULTS: startup-code


 + Line [[(extype)]] ="example"= :: Add a new =example= link type.
   - If the type already exists, update it with the given arguments.

   The syntax for a raw link is =example:path=
   and for the bracketed descriptive form ~[[example:path][description]]~.

   - Some of my intended uses for links including colouring text and doing
     nothing else, as such the terminology ‚Äòpath‚Äô is not sufficiently generic and
     so I use the designation ‚Äòlabel‚Äô instead.

 + Line [[(exfollow)]] =:follow= :: What should happen when a user clicks on such links?

   This is a function taking the link path as the single argument and does
   whatever is necessary to ‚Äúfollow the link‚Äù, for example find a file or display
   a message. In our case, we open the user's browser and go to a particular URL.

 + Line [[(exexport)]] =:export= :: How should this link type be exported to HTML, LaTeX, etc?

   This is a three-argument function that formats the link according to the given
   backend, the resulting string value os placed literally into the exported
   file. Its arguments are:

   1. =label= ‚áí the path of the link, the text after the link type prefix
   2. =description= ‚áí the description of the link, if any
   3. =backend= ‚áí the export format, a symbol like =html= or =latex= or =ascii=.

   In our example above, we return different values depending on the =backend=
   value.

   - If =:export= is not provided, default Org-link exportation happens.

 + Line [[(exdisplay)]] =:display= :: Should links be prettily folded away when a description
   is provided?

 + Line [[(exhelpecho)]] =:help-echo= :: What should happen when the user's mouse is over
   the link?

   This is *either a string or a string-valued function* that takes the current
   window, the current buffer object, and its position in the current window.

   In our example link, we go to the position of the object, destructure the Org
   link's properties using ~-let~, find the description of the link, if any, then
   provide a string based on the link's path and description.

   #+begin_details The general textual property ‚Äòhelp-echo‚Äô
   We may use ~help-echo~ to attach tooltips to arbitrary text in a file, as
   follows. I have found this to be useful in [[https://alhassy.github.io/next-700-module-systems/prototype/package-former.html][*metaprogramming*]] to have
   elaborated, generated, code shown as a tooltip attached to its named
   specification.
   #+begin_src emacs-lisp :tangle no
;; Nearly instantaneous display of tooltips.
(setq tooltip-delay 0)

;; Give user 30 seconds before tooltip automatically disappears.
(setq tooltip-hide-delay 300)

(defun tooltipify (phrase notification &optional underline)
  "Add a tooltip to every instance of PHRASE to show NOTIFICATION.

We only add tooltips to PHRASE as a standalone word, not as a subword.

If UNDERLINE is provided, we underline the given PHRASE so as to
provide a visual clue that it has a tooltip attched to it.

The PHRASE is taken literally; no regexp operators are recognised."
  (assert (stringp phrase))
  (assert (stringp notification))
  (save-excursion  ;; Return cursour to current-point afterwards.
    (goto-char 1)
    ;; The \b are for empty-string at the start or end of a word.
    (while (search-forward-regexp (format "\\b%s\\b" (regexp-quote phrase))
                                  (point-max) t)
      ;; (add-text-properties x y ps)
      ;; ‚áí Override properties ps for all text between x and y.
      (add-text-properties (match-beginning 0)
                           (match-end 0)
                           (list 'help-echo (s-trim notification)))))
 ;; Example use
(tooltipify
  "Line"
  "A sequential formatation of entities or the trace of a particle in linear motion")
   #+end_src

   We will use the tooltip doc:documentation later on ^_^

 Useful info on tooltips:
 + [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html][Changing text properties ---GNU]]
 + [[http://kitchingroup.cheme.cmu.edu/blog/2013/04/12/Tool-tips-on-text-in-Emacs/][Tooltips on text in Emacs ---Kitchin]]
 + [[http://kitchingroup.cheme.cmu.edu/blog/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs/][Getting graphical feedback as tooltips in Emacs ---Kitchin]]
 + [[https://stackoverflow.com/questions/293853/defining-new-tooltips-in-emacs][Defining new tooltips in Emacs ---Stackoverflow]]

   #+end_details

 + Line [[(exface)]] =:face= :: What textual properties do these links possess?

   This is *either a face or a face-valued function* that takes the current link's
   path label as the only argument. That is, we could change the face according
   to the link's label ---which is what we will do for the =color= link type as in
   =[[color:brown][hello]]= will be rendered in brown text.

   - If ~:face~ is not provided, the default underlined blue face for Org links is used.
   - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Faces.html][Learn more about faces!]]

 + More :: See =org-link-parameters= for documentation on more parameters.

** The Core Utility: ~defblock~ and friends
   :PROPERTIES:
   :CUSTOM_ID: The-Core-Utility-defblock-and-friends
   :END:

#+latex_header: \newunicodechar{‚âà}{\ensuremath{\approx}}
#+latex_header: \newunicodechar{‚ü¶}{\ensuremath{[\![}}
#+latex_header: \newunicodechar{‚üß}{\ensuremath{]\!]}}
#+latex_header: \newunicodechar{‚òÖ}{\ensuremath{\star}}
#+latex_header: \newunicodechar{‚á®}{\ensuremath{\Rightarrow}}
#+latex_header: \newunicodechar{‚á¶}{\ensuremath{\Leftarrow}}
#+latex_header: \newunicodechar{‚Ü¶}{\ensuremath{\mapsto}}



To have a unified, and pleasant, interface for declaring new blocks and links,
we take the following approach:
0. [@0] ( /Fuse/ the process of link generation and special block support into
   one macro,  [[doc:org-special-block-extras--defblock][defblock]] which is like doc:defun. )
1. The user writes as string-valued function named ùí≥, possibly with arguments,
   that has access to a ~contents~ and ~backend~ variables.

   #+begin_details ‚Äòdefblock‚Äô Implementation
 #+begin_src emacs-lisp
(defun org-special-block-extras--org-export (x)
  "Wrap the given X in an export block for the current backend."
  (format "\n#+begin_export %s \n%s\n#+end_export\n"
          (if (equal org-special-block-extras--current-backend 'reveal)
              'html
            org-special-block-extras--current-backend)
          x))

(defun org-special-block-extras--org-parse (x)
  "This should ONLY be called within an ORG-EXPORT call."
   (format "\n#+end_export\n%s\n#+begin_export %s\n" x
           (if (equal 'reveal org-special-block-extras--current-backend)
               'html
             org-special-block-extras--current-backend)))

(cl-defmacro org-special-block-extras--defblock
  (name main-arg kwds &optional (docstring "") &rest body)
  "Declare a new special block, and link, in the style of DEFUN.

A full featured example is at the end of this documentation string.

This is an anaphoric macro that provides export support for
special blocks *and* links named NAME. Just as an Org-mode src-block
consumes as main argument the language for the src block,
our special blocks too consume a MAIN-ARG; it may be a symbol
or a cons-list consisting of a symbolic name (with which
to refer to the main argument in the definition of the block)
followed by a default value, then, optionally, any information
for a one-time setup of the associated link type.

The main arg may be a sequence of symbols separated by spaces,
and a few punctuation with the exception of comma ‚Äò,‚Äô since
it is a special Lisp operator. In doubt, enclose the main arg
in quotes.

Then, just as Org-mode src blocks consume key-value pairs, our
special blocks consume a number of KWDS, which is a list of the
form (key‚ÇÄ value‚ÇÄ ‚Ä¶ key‚Çô value‚Çô).

After that is a DOCSTRING, a familar feature of DEFUN.
The docstring is displayed as part of the tooltip
for the produced link type.

Finally, the BODY is a (sequence of) Lisp forms ---no progn needed---
that may refer to the names BACKEND and CONTENTS
which refer to the current export backend and the contents
of the special block ---or the description clause of a link.

CONTENTS refers to an Org-mode parsed string; i.e.,
Org-markup is acknowledged.

In, hopefully, rare circumstances, one may refer
to RAW-CONTENTS to look at the fully unparsed contents.

----------------------------------------------------------------------

The relationship between links and special blocks:

  [ [type:label][description]]
‚âà
   ,#+begin_type label
    description
   ,#+end_type

----------------------------------------------------------------------

Example declaration, with all possible features shown:

   ;; We can use variable values when defining new blocks
   (setq angry-red '(:foreground \"red\" :weight bold))

   (defblock remark
     (editor \"Editor Remark\" :face angry-red) (color \"red\" signoff \"\")
     \"Top level (HTML & LaTeX) editorial remarks; in Emacs they're angry red.\"
     (format (if (equal backend 'html)
               \"<strong style=\\\"color: %s;\\\">‚ü¶%s:  %s%s‚üß</strong>\"
               \"{\\color{%s}\\bfseries %s:  %s%s}\")
             color editor contents signoff))

   ;; I don't want to change the definition, but I'd like to have
   ;; the following as personalised defaults for the ‚Äúremark‚Äù block.
   ;; OR, I'd like to set this for links, which do not have argument options.
   (defblock-header-args remark :main-arg \"Jasim Jameson\" :signoff \"( Aim for success! )\")

Three example uses:

    ;; ‚ü®0‚ü© As a special blocks with arguments given.
    ,#+begin_remark Bobbert Barakallah :signoff \"Thank-you for pointing this out!\" :color green
    I was trying to explain that ${\large (n √ó (n + 1) \over 2}$ is always an integer.
    ,#+end_remark

    ;; ‚ü®1‚ü© As a terse link, using default values for the args.
    ;;     Notice that Org-mode formatting is recoqgnised even in links.
    [ [remark:Jasim Jameson][Why are you taking about ‚Äú$\mathsf{even}$‚Äù here?]]

    ;; ‚ü®2‚ü© So terse that no editor name is provided.
    [ [remark:][Please improve your transition sentences.]]

    ;; ‚ü®‚òÖ‚ü© Unlike 0, examples 1 and 2 will have the default SIGNOFF
    ;; catenated as well as the default red color.
"
  ;; ‚á® The special block support
  ;;
  (add-to-list 'org-special-block-extras--supported-blocks name) ;; global var
  `(progn (cl-defun ,(intern (format "org-special-block-extras--%s" name))
        (backend raw-contents
                 &optional ;; ,(car main-arg)
                 ,(if (consp `,main-arg) (car main-arg) 'main-arg)
                 &rest _
                 &key ,@(-partition 2 kwds))
       ,docstring
       ;; Use default for main argument
       (when (and ',(car main-arg) (s-blank-p ,(car main-arg)))
         (--if-let (plist-get (cdr (assoc ',name org-special-block-extras--header-args)) :main-arg)
             (setq ,(car main-arg) it)
           (setq ,(car main-arg) ,(cadr main-arg))))

       ;; Use any headers for this block type, if no local value is passed
       ,@(loop for k in (mapcar #'car (-partition 2 kwds))
               collect `(--when-let (plist-get (cdr (assoc ',name org-special-block-extras--header-args)) ,(intern (format ":%s" k))) (when (s-blank-p ,k) (setq ,k it))))
       (org-special-block-extras--org-export
                              (let ((contents (org-special-block-extras--org-parse raw-contents))) ,@body)))

  ;; ‚á® The link type support
  (org-link-set-parameters
   ,(format "%s" name)
   ;; The ‚Äòmain-arg‚Äô may contain a special key ‚Äò:link-type‚Äô whose contents
   ;; are dumped here verbatim.
   ;; ‚Äò(main-arg-name main-arg-val :face ‚Ä¶ :follow ‚Ä¶)‚Äô
   ,@(cddr main-arg)
   :export (lambda (label description backend)
             (s-replace-all `(("#+end_export" . "") (,(format "#+begin_export %s" backend) . ""))
                            (,(intern (format "org-special-block-extras--%s" name))
                             backend (or description label) label)))
   ;; The tooltip alongside a link
    :help-echo (lambda (window object position)
                 (save-excursion
                   (goto-char position)
                   (-let* (((&plist :path :format :raw-link :contents-begin :contents-end)
                            (cadr (org-element-context)))
                           (description
                            (when (equal format 'bracket)
                              (copy-region-as-kill contents-begin contents-end)
                              (substring-no-properties (car kill-ring)))))
                     (format "%s\n\n%s"
                            raw-link ,docstring)))))))
 #+end_src

 #+RESULTS:
 : org-special-block-extras--defblock

# [[color:orange][Going forward,]]
Going forward, it would be nice to have a set of switches that apply to all
special blocks. For instance, ~:ignore~ to simply bypass the user-defined
behaviour of a block type, and ~:noexport~ to zero-out a block upon export.  These
are super easy to do ---just need a few minutes to breath.  It may also be
desirable to provide support for [[https://github.com/alhassy/emacs.d#html-folded-drawers][drawers]] ---just as we did to ‚Äòfuse‚Äô the
block-type and link-type approaches used here into one macro.

 #+end_details

2. [@2] We tell Org to please look at all special blocks
   #+begin_src C :tangle no
,#+begin_ùí≥ main-arg :key‚ÇÄ value‚ÇÄ ‚Ä¶ :key‚Çô value‚Çô
contents
,#+end_ùí≥
   #+end_src
   Then, before export happens, to replace all such blocks
   with the /result/ of calling the user's ùí≥ function; i.e.,
   replace them by, essentially,
   #+begin_src emacs-lisp :tangle no
(ùí≥ main-arg :key‚ÇÄ value‚ÇÄ ‚Ä¶ :key‚Çô value‚Çô)
#+end_src

   #+begin_details Implementing the hooking mechanism

The mechanism that rewrites your source...
 #+begin_src emacs-lisp
(defun org-special-block-extras--pp-list (xs)
  "Given XS as (x‚ÇÅ x‚ÇÇ ‚Ä¶ x‚Çô), yield the string ‚Äúx‚ÇÅ x‚ÇÇ ‚Ä¶ x‚Çô‚Äù, no parens.
  When n = 0, yield the empty string ‚Äú‚Äù."
  (s-chop-suffix ")" (s-chop-prefix "(" (format "%s" (or xs "")))))

(defvar org-special-block-extras--supported-blocks nil
  "Which special blocks, defined with DEFBLOCK, are supported.")

(defvar org-special-block-extras--current-backend nil
  "A message-passing channel updated by
org-special-block-extras--support-special-blocks-with-args
and used by DEFBLOCK.")

(defun org-special-block-extras--support-special-blocks-with-args (backend)
  "Remove all headlines in the current buffer.
BACKEND is the export back-end being used, as a symbol."
  (setq org-special-block-extras--current-backend backend)
  (loop for blk in org-special-block-extras--supported-blocks
        for kwdargs = nil
        for blk-start = nil
        do (goto-char (point-min))
        (while (ignore-errors (re-search-forward (format "^\s*\\#\\+begin_%s" blk)))
          ;; MA: HACK: Instead of a space, it should be any non-whitespace, optionally;
          ;; otherwise it may accidentlly rewrite blocks with one being a prefix of the other!
          ; (kill-line)
          ; (error (format "(%s)" (substring-no-properties (car kill-ring))))
          (setq blk-start (line-beginning-position))
          (setq header-start (point))
          (setq body-start (1+ (line-end-position)))
          (setq kwdargs (read (format "(%s)" (buffer-substring-no-properties header-start (line-end-position)))))
          (setq kwdargs (--split-with (not (keywordp it)) kwdargs))
          (setq main-arg (org-special-block-extras--pp-list (car kwdargs)))
          (setq kwdargs (cadr kwdargs))
          ; (beginning-of-line) (kill-line)
          (forward-line -1)
          (re-search-forward (format "^\s*\\#\\+end_%s" blk))
          (setq contents (buffer-substring-no-properties body-start (line-beginning-position)))
          ; (beginning-of-line)(kill-line) ;; Hack!
          (kill-region blk-start (point))
          (insert
             (eval `(,(intern (format "org-special-block-extras--%s" blk))
                     backend
                     contents
                     main-arg
                     ,@(--map (list 'quote it) kwdargs)))
             )
          ;; the --map is so that arguments may be passed
          ;; as "this" or just ‚Äòthis‚Äô (raw symbols)
      )))
#+end_src

When you enable the ~org-special-block-extras~ mode, it is activated...
#+begin_src emacs-lisp :noweb-ref enable-mode :tangle no
;; https://orgmode.org/manual/Advanced-Export-Configuration.html
(add-hook 'org-export-before-parsing-hook 'org-special-block-extras--support-special-blocks-with-args)
 #+end_src

When you disable the ~org-special-block-extras~ mode, it is deactivated...
#+BEGIN_SRC emacs-lisp :noweb-ref disable-mode :tangle no
(remove-hook 'org-export-before-parsing-hook 'org-special-block-extras--support-special-blocks-with-args)
#+END_SRC

#+end_details

   #+begin_details ‚Äòheader-args‚Äô Implementation
   Then:
 #+begin_src emacs-lisp
(defvar org-special-block-extras--header-args nil
  "Alist (name plist) where ‚Äú:main-arg‚Äù is a special plist key.

  It serves a similar role to that of Org's src ‚Äòheader-args‚Äô.

  See doc of SET-BLOCK-HEADER-ARGS for more information.")

(defmacro org-special-block-extras--set-block-header-args (blk &rest kvs)
  "Set default valuts for special block arguments.

This is similar to, and inspired by, Org-src block header-args.

Example src use:
    ,#+PROPERTY: header-args:Language :key value

Example block use:
    (defblock-header-args Block :main-arg mainvalue :key value)

A full, working, example can be seen by ‚ÄúC-h o RET defblock‚Äù.
"
  `(add-to-list 'org-special-block-extras--header-args (list (quote ,blk) ,@kvs)))

(defun org-special-block-extras-short-names ()
  "Expose shorter names to the user.

Namely,

  org-special-block-extras--set-block-header-args   ‚Ü¶  set-block-header-args
  org-special-block-extras--set-block-header-args   ‚Ü¶  defblock
  org-special-block-extras--subtle-colors           ‚Ü¶  subtle-colors
"
  (defalias 'defblock              'org-special-block-extras--defblock)
  (defalias 'set-block-header-args 'org-special-block-extras--set-block-header-args)
  (defalias 'thread-block-call     'org-special-block-extras--thread-blockcall)
  (defalias 'subtle-colors         'org-special-block-extras--subtle-colors))
 #+end_src
#+end_details

   This interface is essentially that of Org's ~src~ blocks, with the ~main-arg~
   being the first argument to ùí≥ and the only argument not needing to be
   preceded by a key name ---it is done this way to remain somewhat consistent
   with the Org ~src~ interface. The user definition of ùí≥ decides on /how optional/
   the arguments actually are.

Perhaps an example will clarify things ...

*** Example: Jasim providing in-place feedback to Bobbert
    :PROPERTIES:
    :CUSTOM_ID: Example-Jasim-providing-in-place-feedback-to-Bobbert
    :END:

 Suppose we want to devise a simple special block for editors to provide
 constructive feedback to authors so that the feedback appears as top-level
 elements of the resulting exported file ---instead of comments that may
 accidentally not be handled by the author.

 In order to showcase the multiple bells and whistles of the system, the snippet
 below is twice as long than it needs to be, but it is still reasonably small and
 accessible.  ( The documentation string to ~defblock~ is mandatory. )
 #+begin_src emacs-lisp :tangle no
;; We can use variable values when defining new blocks
(setq angry-red '(:foreground "red" :weight bold))

;; This is our ùí≥, ‚Äúremark‚Äù.
;; As a link, it should be shown angry-red;
;; it takes two arguments: ‚Äúcolor‚Äù and ‚Äúsignoff‚Äù
;; with default values being "red" and "".
;; (Assuming we already called org-special-block-extras-short-names. )
(defblock rremark
  (editor "Editor Remark" :face angry-red) (color "red" signoff "")
  "Top level (HTML & LaTeX) editorial remarks; in Emacs they're angry red."
  (format (if (equal backend 'html)
            "<strong style=\"color: %s;\">‚ü¶%s:  %s%s‚üß</strong>"
            "{\\color{%s}\\bfseries %s:  %s%s}")
          color editor contents signoff))

;; I don't want to change the definition, but I'd like to have
;; the following as personalised defaults for the ‚Äúremark‚Äù block.
;; OR, I'd like to set this for links, which do not have argument options.
(set-block-header-args rremark :main-arg "Jasim Jameson" :signoff "( Aim for success! )")
 #+end_src

 _Example use_
 #+begin_example org :tangle no
The sum of the first $n$ natural numbers is $\sum_{i = 0}^n i = {n √ó (n + 1)
\over 2}$. Note that $n √ó (n + 1)$ is even.
[[rremark:Jasim Jameson][Why are you taking about ‚Äú$\mathsf{even}$‚Äù here?]]
,#+begin_rremark Bobbert Barakallah :signoff "Thank-you for pointing this out!" :color green
I was trying, uh ...

Yeah, to explain that ${\large n √ó (n + 1) \over 2}$ is always an integer.
,#+end_rremark

Hence, we only need to speak about whole numbers.
[[rremark:][Then please improve your transition sentences.]]
 #+end_example

 _Resulting rendition_
 #+begin_quote
 The sum of the first $n$ natural numbers is $\sum_{i = 0}^n i = {n √ó (n + 1)
 \over 2}$. Note that $n √ó (n + 1)$ is even.
 [[rremark:Jasim Jameson][Why are you taking about ‚Äú$\mathsf{even}$‚Äù here?]]
 #+begin_rremark Bobbert Barakallah :signoff "Thank-you for pointing this out!" :color green
 I was trying, uh ...

 Yeah, to explain that ${\large n √ó (n + 1) \over 2}$ is always an integer.
 #+end_rremark
 Hence, we only need to speak about whole numbers.
[[rremark:][ Then please improve your transition sentences.]]
 #+end_quote

 Notice that the result contains text ---the signoff message--- that the user
 Jasim did not write explicitly.

‚Ä¶ Why the /stuttered/ ~rremark~? Because this package comes with a ~remark~ block that
has more bells and whistles ‚Ä¶ keep reading ;-)

 # For the Lisp
 #+name: startup-code
 #+begin_src emacs-lisp :exports none
;; This is our ùí≥, ‚Äúremark‚Äù.
;; As a link, it should be shown angry-red;
;; it takes two arguments: ‚Äúcolor‚Äù and ‚Äúsignoff‚Äù
;; with default values being "red" and "".
;; (Assuming we already called org-special-block-extras-short-names. )
(org-special-block-extras--defblock rremark
  (editor "Editor Remark" :face '(:foreground "red" :weight bold)) (color "red" signoff "")
  "Top level (HTML & LaTeX) editorial remarks; in Emacs they're angry red."
  (format (if (equal backend 'html)
            "<strong style=\"color: %s;\">‚ü¶%s:  %s%s‚üß</strong>"
            "{\\color{%s}\\bfseries %s:  %s%s}")
          color editor contents signoff))

;; I don't want to change the definition, but I'd like to have
;; the following as personalised defaults for the ‚Äúremark‚Äù block.
;; OR, I'd like to set this for links, which do not have argument options.
(org-special-block-extras--set-block-header-args rremark :main-arg "Jasim Jameson" :signoff "( Aim for success! )")
 #+end_src

** Modularity with ~thread-blockcall~
   :PROPERTIES:
   :CUSTOM_ID: modularity_with_thread-blockcall
   :END:

Since [[doc:org-special-block-extras--defblock][defblock]] let's us pretend block ---and link--- types are string-valued
functions, then one would expect that we can compose blocks /modularly/ as
functions compose. Somewhat analogously to doc:funcall and doc:thread-last, we
provide a macro [[doc:org-special-block-extras--thread-blockcall][thread-blockcall]].

#+begin_box Example
#+begin_src emacs-lisp :tangle no
(thread-blockcall raw-contents
                  (box name)
                  (details (upcase name) :title-color "green")
#+end_src
=
#+begin_src C :tangle no
,#+begin_details NAME :title-color "green"
,#+begin_box name
contents
,#+end_box
,#+end_details
#+end_src
#+end_box

#+html: <br>
#+begin_details Implementation
First, we need to handle the case of one block‚Ä¶
#+begin_src emacs-lisp
(cl-defmacro org-special-block-extras--blockcall (blk &optional main-arg &rest keyword-args-then-contents)
  "An anaologue to `funcall` but for blocks.

Usage: (blockcall blk-name main-arg even-many:key-values raw-contents)

One should rarely use this directly; instead use
org-special-block-extras--thread-blockcall.
"
  `(concat "#+end_export\n" (,(intern (format "org-special-block-extras--%s" blk))
    backend ;; defblock internal
    ; (format "\n#+begin_export html\n\n%s\n#+end_export\n" ,(car (last keyword-args-then-contents))) ;; contents
    ,@(last keyword-args-then-contents) ;; contents
    ,main-arg
    ,@(-drop-last 1 keyword-args-then-contents)) "\n#+begin_export"))
 #+end_src

Using the above sequentially does not work due to the plumbing of
~defblock~, so we handle that plumbing below ‚Ä¶
#+BEGIN_SRC emacs-lisp
(defmacro org-special-block-extras--thread-blockcall (body &rest forms)
  "Thread text through a number of blocks.

BODY is likely to be ‚Äòraw-contents‚Äô, possibly with user manipulations.

Each FORMS is of the shape ‚Äú(block-name main-argument
:key-value-pairs)‚Äù

(thread-blockcall x)       = x
(thread-blockcall x (f a)) = (blockcall f a x)
(thread-blockcall x f‚ÇÅ f‚ÇÇ) ‚âà (f‚ÇÇ (f‚ÇÅ x))

The third is a ‚Äò‚âà‚Äô, and not ‚Äò=‚Äô, because the RHS contains
‚Äòblockcall‚Äôs as well as massages the export matter
between conseqeuctive blockcalls.

A full example:

    (org-special-block-extras--defblock nesting (name) nil
      \"Show text in a box, within details, which contains a box.\"

      (org-special-block-extras--thread-blockcall raw-contents
                        (box name)
                        (details (upcase name) :title-color \"green\")
                        (box (format \"‚á® %s ‚á¶\" name) :background-color \"blue\")
                        ))
"
  (if (not forms) body
     `(-let [result (org-special-block-extras--blockcall ,@(car forms) ,body)]
    ,@(loop for b in (cdr forms)
          collect `(setq result (org-special-block-extras--blockcall ,@b
                                     (concat
                                   "#+begin_export\n"
                                   result
                                   "\n#+end_export"
                                   )))) result)))
   #+END_SRC
#+end_details

*** Short Example: /An opportunity to learn!/
  :PROPERTIES:
  :CUSTOM_ID: Short_Example_An_opportunity_to_learn
  :END:

The following tiny block is composed from two [[doc:org-special-block-extras--details][details]] blocks and a [[doc:org-special-block-extras--box][box]] block
---defined elsewhere in this article. It is intended to give the reader another
opportunity to make sure they have tried to solve the puzzle posed in the main
text before seeing the answer ----this works well in HTML, not so in LaTeX.

#+begin_src emacs-lisp
(org-special-block-extras--defblock solution
  (title "Solution")
  (reprimand "Did you actually try? Maybe see the ‚Äòhints‚Äô above!"
   really "Solution, for real")
  "Show the answers to a problem, but with a reprimand in case no attempt was made."
  (org-special-block-extras--thread-blockcall raw-contents
                    (details really :title-color "red")
                    (box reprimand :background-color "blue")
                    (details title)))
#+end_src

E.g., what is 1 + 1?

#+begin_spoiler
((Useless)) Hint: ((What is a number?))
#+end_spoiler

#+begin_solution
The answer is 2.

If you're interested in such ‚Äòfundamental‚Äô questions, consider reading
  Russel and Whitehead's /Principa Mathematica/ ;-)
#+end_solution

#+latex: \iffalse
The above box was created from:
#+begin_src C :tangle no
,#+begin_solution
The answer is 2.

If you're interested in such ‚Äòfundamental‚Äô questions, consider reading
  Russel and Whitehead's /Principa Mathematica/ ;-)
,#+end_solution
#+end_src
#+latex: \fi

We will make use of this block below when we get to guided problems ;-)

*** Longer Example: Demonstrating Org-markup with ~org-demo~
  :PROPERTIES:
  :CUSTOM_ID: Longer_Example_Demonstrating_Org-markup_with_org-demo
  :END:
Sometimes, we want to show verbatim source and its resulting rendition ---which
is a major part of this article! So, let's make a block to mitigate such an
error-prone tedium.

#+begin_details Implementation
 #+begin_src emacs-lisp
(org-special-block-extras--defblock org-demo nil (source "Source" result "Result"
                        source-color "cyan" result-color "cyan"
                        style "parallel"
                        )
  "Output the CONTENTS of the block as both parsed Org and unparsed.

Label the source text by SOURCE and the result text by RESULT

finally, the source-result fragments can be shown in a STYLE
that is either ‚Äúparallel‚Äù (default) or ‚Äúsequential‚Äù.
"
  (-let [text (concat (org-special-block-extras--org-export (org-special-block-extras--blockcall box source :background-color source-color (org-special-block-extras--org-export (s-replace "\n" (if (equal backend 'html) "<br>" "\\newline") raw-contents))))
                      "\n\n\n\n "
                       (org-special-block-extras--org-export (org-special-block-extras--blockcall box result :background-color result-color raw-contents))
                      )]

   (if (equal style "parallel")
       (org-special-block-extras--blockcall parallel "2" :bar nil text)
       (concat "#+end_export\n" text "\n#+begin_export"))))
 #+end_src

 #+RESULTS:
 | :export | (lambda (label description backend) (s-replace-all `((#+end_export . ) (,(format #+begin_export %s backend) . )) (org-special-block-extras--org-demo backend (or description label) label))) | :help-echo | (lambda (window object position) (save-excursion (goto-char position) (-let* (((&plist :path :format :raw-link :contents-begin :contents-end) (cadr (org-element-context))) (description (when (equal format 'bracket) (copy-region-as-kill contents-begin contents-end) (substring-no-properties (car kill-ring))))) (format %s |



#+end_details
#+html: <br>

 #+begin_box Example
 #+begin_parallel :bar t
 _This_
 #+begin_example org
,#+begin_org-demo
/italics/ and _underline_

$e^{i \times \pi} + 1 = 0$
,#+end_org-demo
 #+end_example
 _Yields_
 #+begin_org-demo
 /italics/ and _underline_

 $e^{i \times \pi} + 1 = 0$
 #+end_org-demo
#+end_parallel
 #+end_box

 #+html: <br>

 #+begin_box (Sequential) Example
  #+begin_parallel :bar t
 _This_
 #+begin_example org
,#+begin_org-demo :style seq
/italics/ and _underline_

$e^{i \times \pi} + 1 = 0$
,#+end_org-demo
 #+end_example
#+html: <br><hr><br>

 _Yields_
 #+begin_org-demo :style seq
 /italics/ and _underline_

 $e^{i \times \pi} + 1 = 0$
 #+end_org-demo
#+end_parallel
 #+end_box

 However, since our implementation scheme relies on a preprocessing step before
 export, we cannot use ~org-demo~ to show the results of special blocks: They
 disappear in the preprocessing step!
 #+begin_parallel :bar t
 E.g., this
 #+begin_example org
,#+begin_org-demo
,#+begin_box
There is no special block ‚Äòbox‚Äô to touch!
,#+end_box
,#+end_org-demo
 #+end_example

#+html: <hr><br>
 yields
 #+begin_org-demo
 #+begin_box
 There is no special block ‚Äòbox‚Äô to touch!
 #+end_box
 #+end_org-demo
#+end_parallel

 However, it does work with links!
 #+begin_org-demo
 [[box:][Box-as-link! Boxception!]]
 #+end_org-demo
#+latex: \fi
** Practice Problems: /Now you try!/
   :PROPERTIES:
   :CUSTOM_ID: practice_problems
   :END:

*[[green:][A 5-page PDF covering ELisp fundamentals]]* can be found *[[https://alhassy.github.io/ElispCheatSheet/CheatSheet.pdf][here]]*.

The first problem is to /get you going with Lisp/, the next two are actually
useful blocks.  The [[doc:org-special-block-extras--rename][rename]] is useful for when you want to change some names or
translate some words; [[doc:org-special-block-extras--spoiler][spoiler]] is useful when we want to test a student's
understanding, or to subtly hide the answer to a puzzle so the reader has the
opportunity to attempt solving it.

*** Sttutttterrr
  :PROPERTIES:
  :CUSTOM_ID: Sttutttterrr
  :END:

Define a block [[doc:org-special-block-extras--stutter][stutter]] so that the following examples behave as shown.

#+begin_details Hints
1. You need at-most 5 lines of Lisp.
2. These functions /may/ be useful: doc:s-repeat, doc:numberp,
   doc:string-to-number
#+end_details

#+html: <br>
#+begin_box Examples

#+begin_parallel :bar t
The following outputs, well, nothing, since we asked for zero repetitions.
#+begin_src org :tangle no
,#+begin_stutter 0

words

more words
,#+end_stutter
#+end_src

#+begin_stutter 0

Body0

Body1

#+end_stutter

#+columnbreak:

In contrast ‚Ä¶
#+begin_org-demo
[[stutter:5][woah, I'm repeated 5 times!]]
#+end_org-demo
#+end_parallel
#+end_box

#+html: <br>
#+begin_solution
#+begin_src emacs-lisp
(org-special-block-extras--defblock stutter (reps 2) nil
  "Output the CONTENTS of the block REPS many times"
  (-let [num (if (numberp reps) reps (string-to-number reps))]
    (s-repeat num contents)))
#+end_src
#+end_solution
*** Textual Substitution ---A translation tool
  :PROPERTIES:
  :CUSTOM_ID: Textual_Substitution
  :END:

Define a block
[[doc:org-special-block-extras--rename][rename]] so that the following examples behave as shown.

#+begin_details Hints
1. It can be done in less than 10 lines of Lisp.
2. First, try to doc:s-replace-all the substitution
   ~'(("Allah" . "God") ("Yacoub". "Jacob") ("Yusuf" . "Joseph"))~
   only.
3. Then take out such hard-coded substitutions ‚Ä¶ these functions /may/ be helpful:
   doc:--map / doc:-map, doc:s-split, doc:s-trim
#+end_details

#+html: <br>
#+begin_box Examples

#+begin_parallel :bar t

# This‚Ä¶
#+begin_example org
,#+begin_rename "Allah to God, Yacoub to Jacob, Yusuf to Joseph"
Quran 12-4: *_Yusuf_* said to his father ( _*Yacoub*_ ), /‚ÄúO my father, indeed I have seen (in a dream) eleven
stars and the sun and the moon; I saw them prostrating to me.‚Äù/
,#+end_rename
#+end_example
Yields‚Ä¶
#+begin_rename "Allah to God, Yacoub to Jacob, Yusuf to Joseph"
Quran 12-4: *_Yusuf_* said to his father ( _*Yacoub*_ ), /‚ÄúO my father, indeed I have seen (in a dream) eleven
stars and the sun and the moon; I saw them prostrating to me.‚Äù/
#+end_rename

--------------------------------------------------------------------------------
#+begin_org-demo

[[rename:Pharaoh to Firaun, Joseph to Yusuf][Genesis 41-17: Pharaoh said unto Joseph, /In my dream, behold, I stood upon the
bank of the river/ ‚Ä¶]]

#+end_org-demo

#+end_parallel
#+end_box

#+html: <br>

#+begin_solution
#+begin_src emacs-lisp
(org-special-block-extras--defblock rename (list "") nil
  "Perform the given LIST of substitutions on the text.
The LIST is a comma separated list of ‚Äòto‚Äô separated symbols.
In a link, no quotes are needed."
  (s-replace-all
   (--map (cons (car it) (cadr it))
          (--map (s-split " to " (s-trim it))
                 (s-split "," list)))
   contents))
#+end_src

#+end_solution
*** Spoilers! ---‚Äúfill in the blanks‚Äù
  :PROPERTIES:
  :CUSTOM_ID: spoilers
  :END:

#+html_head: <style>
#+html_head: .spoiler {color: grey; background-color:grey;}
#+html_head: .spoiler:hover {color: black; background-color:white;}
#+html_head: <style>
# Example use: <span class="spoiler"> test </span>

Define a block [[doc:org-special-block-extras--spoiler][spoiler]] so that the following examples behave as shown.

#+begin_details Hints
1. It can be done in less than 10 lines of Lisp.
2. You will need the following style setup ‚Ä¶
   #+begin_example org
#+html_head: <style>
#+html_head: .spoiler {color: grey; background-color:grey;}
#+html_head: .spoiler:hover {color: black; background-color:white;}
#+html_head: <style>
# Example use: <span class="spoiler"> test </span>
   #+end_example
3. /Escape/ HTML snippets by enclosing them in ~@@html: ‚Ä¶ @@~ ---as discussed above
   in the introduction to special blocks.
4. The functions  doc:s-replace-regexp and doc:regexp-quote /may/ be useful.
#+end_details

#+html: <br>
#+begin_box Examples
#+begin_parallel :bar t
#+begin_example org
,#+begin_spoiler
((Yusuf)) said to his father ((Yacoub)), /‚ÄúO my father, indeed I have seen
((eleven stars)) and ((the sun and the moon)); I saw them prostrating to me.‚Äù/
,#+end_spoiler
#+end_example

#+begin_spoiler
((Yusuf)) said to his father ((Yacoub)), /‚ÄúO my father, indeed I have seen
((eleven stars)) and ((the sun and the moon)); I saw them prostrating to me.‚Äù/
#+end_spoiler

#+columnbreak:

#+begin_example org
,#+begin_spoiler :left "[" :right "]"
[Yusuf] said to his father [Yacoub], /‚ÄúO my father, indeed I have seen
[eleven stars] and [the sun and the moon]; I saw them prostrating to me.‚Äù/
,#+end_spoiler
#+end_example

#+begin_spoiler :left "[" :right "]"
[Yusuf] said to his father [Yacoub], /‚ÄúO my father, indeed I have seen
[eleven stars] and [the sun and the moon]; I saw them prostrating to me.‚Äù/
#+end_spoiler

#+end_parallel
#+end_box

#+html: <br>
#+begin_solution
#+begin_src emacs-lisp
(org-special-block-extras--defblock spoiler () (left "((" right "))")
  "Hide text enclosed in double parens ((like this)) as if it were spoilers.
   LEFT and RIGHT may be other kinds of delimiters."
  (s-replace-regexp
   (concat (regexp-quote left) "\\(.*?\\)" (regexp-quote right))
   "@@html:<span class=\"spoiler\"> \\1 </span>@@"
   contents))
#+end_src

There's actually a problem with this ‚Äòsolution‚Äô; can you find it?
#+begin_spoiler
Hint: ((Try the link form and see how it breaks!))
#+end_spoiler
#+end_solution

** What's the rest of this article about?
   :PROPERTIES:
   :CUSTOM_ID: Whats_the_rest_of_this_article_about?
   :END:

The rest of the article showcases the special blocks declared with ~defblock~ to
allow the above presentation ---with folded regions, coloured boxes, tooltips,
parallel columns of text, etc.

Enjoy ;-)

** The Older =org-special-block-extras--ùí≥= Utility
   :PROPERTIES:
   :CUSTOM_ID: Core-Utility
   :END:

 For posterity, below is the original route taken to solve the same problem.
 In particular, the route outlined below /may/ be faster.

 Why is ~defblock~ better?
 - The approach below requires an awkward way to handle arguments, key-values.
 - It requires the user to learn a new interface.
 - Even if it's slower, ~defblock~ uses a very familiar interface and requires less
   Lisp mastery on the user's part.

 --------------------------------------------------------------------------------

 :Hide:
  #+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Core utility
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 #+END_SRC
 :End:

 The simplest route is to ‚Äòadvise‚Äô ---i.e., function patch or overload--- the Org
 export utility for special blocks to consider calling a method
 =org-special-block-extras--ùí≥= whenever it encounters a special block named =ùí≥=.
 #+BEGIN_SRC emacs-lisp :noweb-ref enable-mode :tangle no
(advice-add #'org-html-special-block
   :before-until (apply-partially #'org-special-block-extras--advice 'html))

(advice-add #'org-latex-special-block
   :before-until (apply-partially #'org-special-block-extras--advice 'latex))
 #+END_SRC

 #+RESULTS:

 Here is the actual advice:
 #+BEGIN_SRC emacs-lisp
(defun org-special-block-extras--advice (backend blk contents _)
  "Invoke the appropriate custom block handler, if any.

A given custom block BLK has a TYPE extracted from it, then we
send the block CONTENTS along with the current export BACKEND to
the formatting function ORG-SPECIAL-BLOCK-EXTRAS--TYPE if it is
defined, otherwise, we leave the CONTENTS of the block as is.

We also support the seemingly useless blocks that have no
contents at all, not even an empty new line."
  (let* ((type    (nth 1 (nth 1 blk)))
         (handler (intern (format "org-special-block-extras--%s" type))))
    (ignore-errors (apply handler backend (or contents "") nil))))
 #+END_SRC

 #+RESULTS:
 :

 #+latex: \noindent
 *To support a new block named ùí≥:*
 1. Define a function =org-special-block-extras--ùí≥=.
 2. It must take two arguments:
    - ~backend~ ‚áí A symbol such as ='html= or ='latex=,
    - ~content~ ‚áí The string contents of the special block.
 3. The function must return a string, possibly depending on the backend being
    exported to. The resulting string is inserted literally in the exported file.
 4. Test out your function as in =(org-special-block-extras--ùí≥ 'html "some input")=
    ---this is a quick way to find errors.
 5. Enjoy ^_^

 #+begin_center
 If no such function is defined, we export =ùí≥= blocks using the default
 mechanism, as discussed earlier, as a LaTeX environment or an HTML =div=.
 #+end_center

 #+latex: \noindent
 An example is provided at the end of this section.

 #+latex: \noindent
 Of-course, when the user disables our mode, then we remove such advice.
 #+BEGIN_SRC emacs-lisp :noweb-ref disable-mode :tangle no
(advice-remove #'org-html-special-block
               (apply-partially #'org-special-block-extras--advice 'html))

(advice-remove #'org-latex-special-block
               (apply-partially #'org-special-block-extras--advice 'latex))
 #+END_SRC

 #+RESULTS:

*** ¬† =:argument:= Extraction
    :PROPERTIES:
    :CUSTOM_ID: argument-Extraction
    :END:

 As far as I can tell, there is no way to provide arguments to special blocks.
 As such, the following utility looks for lines of the form =:argument: value=
 within the contents of a block and returns an updated contents string that no
 longer has such lines followed by an association list of such argument-value
 pairs.

  #+BEGIN_SRC emacs-lisp
(defun org-special-block-extras--extract-arguments (contents &rest args)
"Get list of CONTENTS string with ARGS lines stripped out and values of ARGS.

Example usage:

    (-let [(contents‚Ä≤ . (&alist 'k‚ÇÄ ‚Ä¶ 'k‚Çô))
           (‚Ä¶extract-arguments contents 'k‚ÇÄ ‚Ä¶ 'k‚Çô)]
          body)

Within ‚Äòbody‚Äô, each ‚Äòk·µ¢‚Äô refers to the ‚Äòvalue‚Äô of argument
‚Äò:k·µ¢:‚Äô in the CONTENTS text and ‚Äòcontents‚Ä≤‚Äô is CONTENTS
with all ‚Äò:k·µ¢:‚Äô lines stripped out.

+ If ‚Äò:k:‚Äô is not an argument in CONTENTS, then it is assigned value NIL.
+ If ‚Äò:k:‚Äô is an argument in CONTENTS but is not given a value in CONTENTS,
  then it has value the empty string."
  (let ((ctnts contents)
        (values (cl-loop for a in args
                         for regex = (format ":%s:\\(.*\\)" a)
                         for v = (cadr (s-match regex contents))
                         collect (cons a v))))
    (cl-loop for a in args
             for regex = (format ":%s:\\(.*\\)" a)
             do (setq ctnts (s-replace-regexp regex "" ctnts)))
    (cons ctnts values)))
  #+END_SRC

  #+RESULTS:
  : org-special-block-extras--extract-arguments

 For example, we use this feature to indicate when a column break should happen
 in a =parallel= block and which person is making editorial remarks in an
 =remark= block.

 Why the =:ùí≥:= notation? At the start of a line, a string of this form is coloured
 ---I don't recall why that is--- and that's a good enough reason to make use of
 such an existing support.

 #+begin_remark Aside
 In org-mode, ‚Äòdrawers‚Äô are pieces of text that begin with
 =:my_drawer_name:= on a line by itself and end with =:end:= on a line by itself, and
 these delimiters allow us to fold away such regions and possibly exclude them
 from export. That is, drawers act as a light-weight form of blocks. Anyhow, Org
 colours drawer delimiters,
 #+end_remark

*** An Example Special Block ---=foo=
    :PROPERTIES:
    :CUSTOM_ID: COMMENT-An-Example-Special-Block-foo
    :END:

 Herein we show an example function =org-special-block-extras--ùí≥= that makes use of
 arguments.  In a so-called =foo= block, all occurrences of the word =foo= are
 replaced by =bar= unless the argument =:replacement:= is given a value.

 [[file:images/foo_block.png]]

 #+name: startup-code
 #+begin_src emacs-lisp :tangle no
(defun org-special-block-extras--foo (backend contents)
  "The FOO block type replaces all occurances of ‚Äòfoo‚Äô with ‚Äòbar‚Äô,
unless a ‚Äò:replacement:‚Äô is provided."
  (-let [(contents‚Ä≤ . (&alist 'replacement))
           (org-special-block-extras--extract-arguments contents 'replacement)]
    (s-replace "foo" (or replacement "bar") contents‚Ä≤)))
 #+end_src

:Outdated_hide:

 Here's an example usage:
 #+begin_parallel
 #+begin_example org
#+begin_foo
:replacement: woah
I am foo; Indeed FoO is what I fOo!
#+end_foo
 #+end_example

 :columnbreak:

 #+begin_foo
 :replacement: woah
 I am foo; Indeed FoO is what I fOo!
 #+end_foo
 #+end_parallel

# See the implementation matter of ~edcomm~ or ~parallel~ for a more involved definition
# that behaves differently depending on the export backend.

:End:
* Editor Comments
  :PROPERTIES:
  :CUSTOM_ID: editor-comments
  :END:

 ‚ÄúEditor Comments‚Äù are intended to be top-level first-class comments in an
 article that are inline with the surrounding text and are delimited in such a
 way that they are visible but drawing attention.  I first learned about this
 idea from Wolfram Kahl ---who introduced me to Emacs many years ago.  We
 implement editor comments as special blocks named [[doc:org-special-block-extras--remark][remark]].

#+begin_box Example

#+begin_parallel
_This_

#+begin_src C :tangle no
 In LaTeX, an =remark= appears inline with the text surrounding it.
 ,#+begin_remark Bobert
 org-mode is dope, yo!
 ,#+replacewith:
 Org-mode is essentially a path toward enlightenment.
 ,#+end_remark
 Unfortunately, in the HTML rendition, the =remark= is its own paragraph and thus
 separated by new lines from its surrounding text.
#+end_src

#+html: <hr><br>

_Yields_

 In LaTeX, an =remark= appears inline with the text surrounding it.
 #+begin_remark Bobert
 org-mode is dope, yo!
 #+replacewith:
 Org-mode is essentially a path toward enlightenment.
 #+end_remark
 Unfortunately, in the HTML rendition, the =remark= is its own paragraph and thus
 separated by new lines from its surrounding text.
#+end_parallel
#+end_box

:Pics_old:
 #+caption: In order: Chrome, Emacs Web Wowser, Org source, PDF
 [[file:images/edcomm.png]]
:End:

# | /Any new ---possibly empty--- inner lines in the =remark= are desirably preserved/ |

--------------------------------------------------------------------------------

 All editor comments, remarks, are disabled by declaring, in your Org file:
 #+begin_example org
,#+bind: org-special-block-extras-hide-editor-comments t
 #+end_example
 The =#+bind:= keyword makes Emacs variables buffer-local during export
 ---it is evaluated /after/ any =src= blocks. To use it, one must declare in
 their Emacs init file the following line, which our mode
 ensures is true.
 #+BEGIN_SRC emacs-lisp :tangle no :noweb-ref enable-mode
(setq org-export-allow-bind-keywords t)
 #+END_SRC

 | ( Remember to =C-c C-c= the =#+bind= to activate it, the first time it is written. ) |

 #+bind: org-special-block-extras-hide-editor-comments nil

--------------------------------------------------------------------------------

#+begin_details Example: No optional arguments
 #+begin_remark
 /Please/ *change* _this_ section to be more, ya know, professional.
 #+end_remark
#+end_details

#+begin_details "Example: Only providing a main argument ---i.e., the remark author, the editor"
 #+begin_remark Bobert
 /Please/ *change* _this_ section to be more, ya know, professional.
 #+end_remark

 #+latex: \vspace{1em}\noindent
#+end_details

#+begin_details Example: Possibly with no contents:
 #+begin_remark Bobert
 #+end_remark
#+end_details

#+begin_details "Example: Empty contents, no authour, nothing"
 #+begin_remark
 #+end_remark
#+end_details

 #+latex: \vspace{1em}\noindent

 #+begin_details Example: Possibly with an empty new line
 #+begin_remark

 #+end_remark
#+end_details

#+latex: \iffalse
#+begin_details "Example: With a #+replacewith: clause"
 #+begin_remark
 The two-dimensional notation; e.g., $\sum_{i = 0}^n i^2$
 #+replacewith:
 A linear one-dimensional notation; e.g.,
 $(\Sigma i : 0..n \;\bullet\; i^2)$
 #+end_remark
#+end_details
#+latex: \fi

 #+latex: \vspace{1em}\noindent

 #+begin_details Example: Possibly ‚Äúmalformed‚Äù replacement clauses

Forgot the thing to be replaced‚Ä¶
      #+begin_remark
 #+replacewith:
 A linear one-dimensional notation; e.g.,
 $(\Sigma i : 0..n \;\bullet\; i^2)$
 #+end_remark

--------------------------------------------------------------------------------

Forgot the new replacement thing‚Ä¶
      #+begin_remark
 The two-dimensional notation; e.g., $\sum_{i = 0}^n i^2$
 #+replacewith:
 #+end_remark

--------------------------------------------------------------------------------

Completely lost one's train of thought‚Ä¶

 #+begin_remark
 #+replacewith:
 #+end_remark
#+end_details

--------------------------------------------------------------------------------

 #+begin_details Implementing ‚Äòremark‚Äô with more bells and whistles
 #+BEGIN_SRC emacs-lisp
(defvar org-special-block-extras-hide-editor-comments nil
  "Should editor comments be shown in the output or not.")

(org-special-block-extras--defblock remark
      (editor "Editor Remark" :face '(:foreground "red" :weight bold)) (color "black" signoff "" strong nil)
"Format CONTENTS as an first-class editor comment according to BACKEND.

The CONTENTS string has an optional switch: If it contains a line
with having only ‚Äò#+replacewith:‚Äô, then the text preceding this
clause should be replaced by the text after it; i.e., this is
what the EDITOR (the person editing) intends and so we fromat the
replacement instruction (to the authour) as such.

In Emacs, as links, editor remarks are shown with a bold red; but
the exported COLOR of a remark is black by default and it is not
STRONG ---i.e., bold---. There is an optional SIGNOFF message
that is appended to the remark.
"
  (-let* (;; Are we in the html backend?
          (tex? (equal backend 'latex))

          ;; fancy display style
          (boxed (lambda (x)
                   (if tex?
                       (concat "\\fbox{\\bf " x "}")
                     (concat "<span style=\"border-width:1px"
                             ";border-style:solid;padding:5px\">"
                             "<strong>" x "</strong></span>"))))

          ;; Is this a replacement clause?
          ((this that) (s-split "\\#\\+replacewith:" contents))
          (replacement-clause? that) ;; There is a ‚Äòthat‚Äô
          (replace-keyword (if tex?
                             "\\underline{Replace:}" "&nbsp;<u>Replace:</u>"))
          (with-keyword    (if tex? "\\underline{With:}" "<u>With:</u>"
                             ))
          (editor (format "[%s:%s" editor
                          (if replacement-clause?
                              replace-keyword
                            "")))
          (contents‚Ä≤ (if replacement-clause?
                         (format "%s %s %s" this
                                 (org-special-block-extras--org-export (funcall boxed with-keyword))
                                 that)
                       contents))

          ;; ‚Äú[Editor Comment:‚Äù
          (edcomm-begin (funcall boxed editor))
          ;; ‚Äú]‚Äù
          (edcomm-end (funcall boxed "]")))

    (setq org-export-allow-bind-keywords t) ;; So users can use ‚Äú#+bind‚Äù immediately
    (if org-special-block-extras-hide-editor-comments
        ""
      (format (pcase backend
                ('latex (format "{\\color{%%s}%s %%s %%s %%s %%s}" (if strong "\\bfseries" "")))
                (_ (format "<%s style=\"color: %%s;\">%%s %%s %%s %%s</%s>" (if strong "strong" "p") (if strong "strong" "p"))))
              color edcomm-begin contents‚Ä≤ signoff edcomm-end))))
 #+END_SRC

 :Older_version:
  #+BEGIN_SRC emacs-lisp :tangle no
(defvar org-special-block-extras-hide-editor-comments nil
  "Should editor comments be shown in the output or not.")

(defun org-special-block-extras--edcomm (backend contents)
"Format CONTENTS as an first-class editor comment according to BACKEND.

The CONTENTS string has two optional argument switches:
1. :ed: ‚áí To declare an editor of the comment.
2. :replacewith: ‚áí [Nullary] The text preceding this clause
   should be replaced by the text after it."
  (-let* (
           ;; Get arguments
           ((contents‚ÇÅ . (&alist 'ed))
            (org-special-block-extras--extract-arguments contents 'ed))

           ;; Strip out any <p> tags
           (_ (setq contents‚ÇÅ (s-replace-regexp "<p>" "" contents‚ÇÅ)))
           (_ (setq contents‚ÇÅ (s-replace-regexp "</p>" "" contents‚ÇÅ)))

           ;; Are we in the html backend?
           (html? (equal backend 'html))

           ;; fancy display style
           (boxed (lambda (x)
                    (if html?
                        (concat "<span style=\"border-width:1px"
                                 ";border-style:solid;padding:5px\">"
                                 "<strong>" x "</strong></span>")
                    (concat "\\fbox{\\bf " x "}"))))

           ;; Is this a replacement clause?
           ((this that) (s-split ":replacewith:" contents‚ÇÅ))
           (replacement-clause? that) ;; There is a ‚Äòthat‚Äô
           (replace-keyword (if html? "&nbsp;<u>Replace:</u>"
                              "\\underline{Replace:}"))
           (with-keyword    (if html? "<u>With:</u>"
                              "\\underline{With:}"))
           (editor (format "[%s:%s"
                           (if (s-blank? ed) "Editor Comment" ed)
                           (if replacement-clause?
                               replace-keyword
                             "")))
           (contents‚ÇÇ (if replacement-clause?
                          (format "%s %s %s" this
                                  (funcall boxed with-keyword)
                                  that)
                        contents‚ÇÅ))

           ;; ‚Äú[Editor Comment:‚Äù
           (edcomm-begin (funcall boxed editor))
           ;; ‚Äú]‚Äù
           (edcomm-end (funcall boxed "]")))

    (setq org-export-allow-bind-keywords t) ;; So users can use ‚Äú#+bind‚Äù immediately
    (if org-special-block-extras-hide-editor-comments
        ""
      (format (pcase backend
                ('latex "%s %s %s")
                (_ "<p> %s %s %s</p>"))
              edcomm-begin contents‚ÇÇ edcomm-end))))
 #+END_SRC
:End:

 In the HTML export, the =edcomm= special block is /not/ in-line with the text
 surrounding it ---ideally, it would be inline so that existing paragraphs are
 not split into multiple paragraphs but instead have an editor's comment
 indicating suggested alterations.
#+end_details

--------------------------------------------------------------------------------

 A block to make an editorial comment could be overkill in some cases; luckily
 [[doc:org-special-block-extras--defblock][defblock]] automatically provides an associated link type for the declared
 special blocks.

 - Syntax: =[[remark:person_name][editorial remark]]=.
 - This link type exports the same as the =remark= block type;
   however, in Emacs it is shown with an ‚Äòangry‚Äô ---bold--- red face.

:Old_unnecessary_implementaiton:
 #+begin_src emacs-lisp -n -r
(org-link-set-parameters
 "edcomm"
  :follow (lambda (_))
  :export (lambda (label description backend)
            (org-special-block-extras--edcomm
             backend
             (format ":ed:%s\n%s" label description)))
  :help-echo (lambda (_ __ position)
               (save-excursion
                 (goto-char position)
                 (-let [(&plist :path) (cadr (org-element-context))]
                   (format "%s made this remark" (s-upcase path)))))
  :face '(:foreground "red" :weight bold))
 #+end_src
:End:

#+begin_box Example: Terse remarks via links

#+begin_parallel :bar t
~[[edcomm:Jasim][Hello, where are you?]]~

# +html: <br>
[[remark:Jasim][Hello, where are you?]]
#+end_parallel
-------
#+begin_parallel :bar t
 The =#+replacewith:= switch ---and usual Org markup--- also works with these
 links: @@html: <br>@@ ~[[remark:Qasim][/‚Äòj‚Äô/ #+replacewith: /‚Äòq‚Äô/]]~

#+html: <br>
 [[remark:Qasim][/‚Äòj‚Äô/ #+replacewith: /‚Äòq‚Äô/]]
#+end_parallel

#+end_box

* Folded Details ---As well as boxed text and subtle colours
  :PROPERTIES:
  :CUSTOM_ID: Folded-Details
  :END:

  #+begin_center
/How did we fold away those implementations?/
  #+end_center

Sometimes there is a remark or a code snippet that is useful to have, but not
relevant to the discussion at hand and so we want to /fold away such [[doc:org-special-block-extras--details][details]]/.

+ ‚ÄòConversation-style‚Äô articles, where the author asks the reader questions
  whose answers are ‚Äúfolded away‚Äù so the reader can think about the exercise
  before seeing the answer.

+ Hiding boring but important code snippets, such as a list of import
  declarations or a tedious implementation.

#+latex_header: \usepackage{tcolorbox}
#+begin_center
Requires: src_latex[:exports code]{,#+latex_header:  \usepackage{tcolorbox}}
#+end_center

:Pics:
#+caption: Visually hiding, folding away, details
[[file:images/details.png]]
:End:

#+begin_details Implementation
#+begin_src emacs-lisp -n -r
(org-special-block-extras--defblock details (title "Details") (title-color "green")
  "Enclose contents in a folded up box, for HTML.

For LaTeX, this is just a boring, but centered, box.

By default, the TITLE of such blocks is ‚ÄúDetails‚Äù
and its TITLE-COLOR is green.

In HTML, we show folded, details, regions with a nice greenish colour.

In the future ---i.e., when I have time---
it may be prudent to expose more aspects as arguments,
such as ‚Äòbackground-color‚Äô.
"
  (format
   (pcase backend
     (`latex "\\begin{quote}
                  \\begin{tcolorbox}[colback=%s,title={%s},sharp corners,boxrule=0.4pt]
                    %s
                  \\end{tcolorbox}
                \\end{quote}")
     (_ "<details class=\"code-details\"
                 style =\"padding: 1em;
                          background-color: #e5f5e5;
                          /* background-color: pink; */
                          border-radius: 15px;
                          color: hsl(157 75% 20%);
                          font-size: 0.9em;
                          box-shadow: 0.05em 0.1em 5px 0.01em  #00000057;\">
                  <summary>
                    <strong>
                      <font face=\"Courier\" size=\"3\" color=\"%s\">
                         %s
                      </font>
                    </strong>
                  </summary>
                  %s
               </details>"))
   title-color title contents))
#+end_src

#+RESULTS:
| :export | (lambda (label description backend) (s-replace-all `((#+end_export . ) (,(format #+begin_export %s backend) . )) (org-special-block-extras--details backend (or description label) label))) | :help-echo | (lambda (window object position) (save-excursion (goto-char position) (-let* (((&plist :path :format :raw-link :contents-begin :contents-end) (cadr (org-element-context))) (description (when (equal format 'bracket) (copy-region-as-kill contents-begin contents-end) (substring-no-properties (car kill-ring))))) (format %s |



:Posterity_Older_implementation:
#+BEGIN_SRC emacs-lisp -n -r :tangle no
(defun org-special-block-extras--details (backend contents)
"Format CONTENTS as a ‚Äòfolded region‚Äô according to BACKEND.

CONTENTS may have a ‚Äò:title‚Äô argument specifying a title for
the folded region."
(-let* (;; Get arguments
        ((contents‚Ä≤ . (&alist 'title))
         (org-special-block-extras--extract-arguments contents 'title)))
  (when (s-blank? title) (setq title "Details"))
  (setq title (s-trim title))
  (format
   (s-collapse-whitespace ;; Remove the whitespace only in the nicely presented
                          ;; strings below
    (pcase backend
      (`html "<details class=\"code-details\">
                 <summary>
                   <strong>
                     <font face=\"Courier\" size=\"3\" color=\"green\"> %s
                     </font>
                   </strong>
                 </summary>
                 %s
              </details>")
      (`latex "\\begin{quote}
                 \\begin{tcolorbox}[colback=white,sharp corners,boxrule=0.4pt]
                   \\textbf{%s:}
                   %s
                 \\end{tcolorbox}
               \\end{quote}")))
    title contents‚Ä≤)))
#+END_SRC

#+RESULTS:
: org-special-block-extras--details

:End:

We could use
src_latex[:exports code]{\begin{quote}\fbox{\parbox{\linewidth}{\textbf{Details:}
...}}\end{quote}}; however, this does not work well with [[https://github.com/alhassy/emacs.d#bibliography--coloured-latex-using-minted][minted]] for coloured
source blocks. Instead, we use ~tcolorbox~.

#+end_details

** Example: /Here's a nifty puzzle, can you figure it out?/
   :PROPERTIES:
   :CUSTOM_ID: Example
   :END:
Reductions ---incidentally also called ‚Äòfolds‚Äô[fn:1]--- embody primitive
recursion and thus computability. For example, what does the following compute
when given a whole number ùìÉ?
#+BEGIN_SRC emacs-lisp :tangle no
(-reduce #'/ (number-sequence 1.0 ùìÉ))
#+END_SRC

#+begin_details Solution :title-color pink
Rather than guess-then-check, let's /calculate/!

#+begin_src emacs-lisp :tangle no
  (-reduce #'/ (number-sequence 1.0 ùìÉ))
= ;; Lisp is strict: Evaluate inner-most expression
  (-reduce #'/ '(1.0 2.0 3.0 ‚Ä¶ ùìÉ))
= ;; Evaluate left-associating reduction
  (/ (/ (/ 1.0 2.0) ‚ãØ) ùìÉ)
=;; Arithmetic: (/ (/ a b) c) = (* (/ a b) (/ 1 c)) = (/ a (* b c))
  (/ 1.0 (* 2.0 3.0 ‚Ä¶ ùìÉ))
#+END_SRC

We have thus found the above Lisp program to compute the inverse factorial of ùìÉ;
i.e., $\large \frac{1}{ùìÉ!}$.
#+end_details

Neato, let's do more super cool stuff ^_^

#+begin_footnotesize
( In the Emacs Web Wowser, folded regions are displayed unfolded similar to
LaTeX. )
#+end_footnotesize
** Boxed Text
   :PROPERTIES:
   :CUSTOM_ID: Boxed-Text
   :END:

 Folded regions, as implemented above, are displayed in a super neat text box
 which may be useful to enclose text to make it standout ---without having it
 folded away. As such, we provide the special block [[doc:org-special-block-extras--box][box]] to enclosing text in
 boxes.

 #+latex_header: \usepackage{tcolorbox}
#+begin_center
Requires: src_latex[:exports code]{#+latex_header:  \usepackage{tcolorbox}}
#+end_center

 #+begin_details Implementation
 #+begin_src emacs-lisp -r -n
(org-special-block-extras--defblock box (title "") (background-color nil)
  "Enclose text in a box, possibly with a title.

By default, the box's COLOR is green for HTML and red for LaTeX,
and it has no TITLE.

The HTML export uses a padded div, whereas the LaTeX export
requires the tcolorbox pacakge.

In the future, I will likely expose more arguments.
"
  (apply #'concat
  (pcase backend
   (`latex `("\\begin{tcolorbox}[title={" ,title "}"
             ",colback=" ,(pp-to-string (or background-color 'red!5!white))
             ",colframe=red!75!black, colbacktitle=yellow!50!red"
             ",coltitle=red!25!black, fonttitle=\\bfseries,"
             "subtitle style={boxrule=0.4pt, colback=yellow!50!red!25!white}]"
             ,contents
             "\\end{tcolorbox}"))
    (_ `("<div style=\"padding: 1em; background-color: "
             ,(org-special-block-extras--subtle-colors (format "%s" (or background-color "green")))
             ";border-radius: 15px; font-size: 0.9em"
             "; box-shadow: 0.05em 0.1em 5px 0.01em #00000057;\">"
             "<h3>" ,title "</h3>"
            ,contents "</div>")))))
 #+end_src

 #+RESULTS:
 | :export | (lambda (label description backend) (s-replace-all `((#+end_export . ) (,(format #+begin_export %s backend) . )) (org-special-block-extras--box backend (or description label) label))) | :help-echo | (lambda (window object position) (save-excursion (goto-char position) (-let* (((&plist :path :format :raw-link :contents-begin :contents-end) (cadr (org-element-context))) (description (when (equal format 'bracket) (copy-region-as-kill contents-begin contents-end) (substring-no-properties (car kill-ring))))) (format %s |


 #+end_details

 #+latex_header: \newunicodechar{·µí}{\ensuremath{{}^o}}
 #+html: <br>
 #+begin_box Example: A super boring observation presented obscurely :background-color blue

 If you start walking ---say, counterclockwise--- along the unit circle from its
 right-most point and walk 180·µí, then you will be at its left-most point. That
 is, \[ e^{i ¬∑ \pi} \;=\; - 1 \]


 #+end_box

 /How did we get that nice light blue? What is its HTML code?/
 That's not something I care to remember, so let's make a handy
 dandy utility ‚Ä¶ Now when users request a colour to ~box~ their text,
 it will be a ‚Äòsubtle colour‚Äô ;-)

 #+begin_details Implementation for Subtle Colours
 #+begin_src emacs-lisp -r -n
(defun org-special-block-extras--subtle-colors (c)
  "HTML codes for common colours.

Names are very rough approximates.

   Translations from: https://www.december.com/html/spec/softhues.html"
  (pcase c
    ("teal"    "#99FFCC") ;; close to aqua
    ("brown"   "#CCCC99") ;; close to moss
    ("gray"    "#CCCCCC")
    ("purple"  "#CCCCFF")
    ("lime"    "#CCFF99") ;; brighter than ‚Äògreen‚Äô
    ("green"   "#CCFFCC")
    ("blue"    "#CCFFFF")
    ("orange"  "#FFCC99")
    ("peach"   "#FFCCCC")
    ("pink"    "#FFCCFF")
    ("yellow"  "#FFFF99")
    ("custard" "#FFFFCC") ;; paler than ‚Äòyellow‚Äô
    (c c)
  ))
 #+end_src

#+latex: \iffalse

To use these colour names, you will need the following incantations in your
Org file.

#+begin_org-demo
#+latex_header: \usepackage{xcolor}

#+latex_header: \definecolor{teal}    {HTML}{99FFCC}
#+latex_header: \definecolor{brown}   {HTML}{CCCC99}
#+latex_header: \definecolor{gray}    {HTML}{CCCCCC}
#+latex_header: \definecolor{purple}  {HTML}{CCCCFF}
#+latex_header: \definecolor{lime}    {HTML}{CCFF99}
#+latex_header: \definecolor{green}   {HTML}{CCFFCC}
#+latex_header: \definecolor{blue}    {HTML}{CCFFFF}
#+latex_header: \definecolor{orange}  {HTML}{FFCC99}
#+latex_header: \definecolor{peach}   {HTML}{FFCCCC}
#+latex_header: \definecolor{pink}{HTML}{FFCCFF}
#+latex_header: \definecolor{yellow}  {HTML}{FFFF99}
#+latex_header: \definecolor{custard}{HTML}{FFFFCC}

#+latex_header: \definecolor{cyan}{HTML}{00FFFF}
#+end_org-demo

#+latex_header: \definecolor{"cyan"}{HTML}{00FFFF}

In the future, it'd be nice to account for colours for LaTeX as well.  ( E.g.,
src_latex[:exports code]{\color{blue}} is a nightmare. )

#+latex: \fi

 #+end_details

 It may be useful to /fuse/ the ~box~ and ~details~ concepts into one.  Something for
 future me ---or another contributor--- to think about ;-)

* Parallel
  :PROPERTIES:
  :CUSTOM_ID: Parallel
  :END:

  Articles can get lengthy when vertical whitespace is wasted on thin lines;
  instead, one could save space by using /[[doc:org-special-block-extras--parallel][parallel]] columns of text/.

#+latex_header:  \usepackage{multicol}
#+begin_center
Requires: src_latex[:exports code]{#+latex_header:  \usepackage{multicol}}
#+end_center

#+begin_details Implementation
  #+begin_src emacs-lisp -r -n
(org-special-block-extras--defblock parallel (cols 2) (bar nil)
  "Place ideas side-by-side, possibly with a seperator.

There are COLS many columns, and they may be seperated by black
solid vertical rules if BAR is a non-nil value.

Writing ‚Äú#+begin_parallel ùìÉ :bar (any text except ‚Äònil‚Äô)‚Äù
will produce a parallel of ùìÉ many columns, possibly
seperated by solid rules, or a ‚Äúbar‚Äù.

The contents of the block may contain ‚Äò#+columnbreak:‚Äô to request
a columnbreak. This has no effect on HTML export since HTML
describes how text should be formatted on a browser, which can
dynamically shrink and grow and thus it makes no sense to have
hard columnbreaks.
"
  (let ((rule (pcase backend
               (`latex (if bar 2 0))
               (_  (if bar "solid" "none"))))
        (contents‚Ä≤  (s-replace "#+columnbreak:"
                               (if (equal 'latex backend) "\\columnbreak" "")
                               contents)))
  (format (pcase backend
   (`latex "\\par \\setlength{\\columnseprule}{%s pt}
          \\begin{minipage}[t]{\\linewidth}
          \\begin{multicols}{%s}
          %s
          \\end{multicols}\\end{minipage}")
   (_ "<div style=\"column-rule-style: %s;column-count: %s;\">%s</div>"))
   rule cols contents‚Ä≤)))
#+end_src

# [[color:orange][Going forward,]]
Going forward, it would be desirable to have the columns take a specified percentage of
the available width ---whereas currently it splits it uniformly.  Such a feature
would be useful in cases where one column is wide and the others are not.

# 2pt ‚Ü¶ 0.5pt ?? Maybe use a #+bind? or make column seperator a top-level configurable item?

#+end_details

#+html: <br>
#+begin_box Example
_This_
#+begin_src C :tangle no
,#+begin_parallel 2 :bar yes-or-any-other-text
X

Y

,#+columnbreak:

Z
,#+end_parallel
#+end_src

_Yields_

#+begin_parallel 2 :bar t
X

Y

#+columnbreak:

Z
#+end_parallel
#+end_box

#+begin_center
( The [[https://www.gnu.org/software/emacs/manual/html_mono/eww.html][Emacs Web Wowser]], ~M-x eww~, does not display =parallel= environments as
desired. )
#+end_center

** COMMENT Older setup :Possibly_delete:
   :PROPERTIES:
   :CUSTOM_ID: COMMENT-Older-setup
   :END:

:Header:
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Parallel blocks: ùìÉparallel[NB] for n:2..5, optionally with ‚ÄòN‚Äôo ‚Äòb‚Äôar
;; in-between the columns.
;;
;; Common case is to have three columns, and we want to avoid invoking the
;; attribute via org, so making this.
#+END_SRC
:End:

We want to be able to reduce the amount of whitespace noise in our articles, and
so use the =parallel= block to place ideas side-by-side ---with up to the chosen
limit of 5 columns.

#+caption: Displaying thoughts side-by-side ^_^ Top is browser, then Emacs, then PDF
[[file:images/parallel.png]]

#+LATEX_HEADER: \usepackage{multicol}
| =#+LATEX_HEADER: \usepackage{multicol}= |

I initially used the names =parallelùìÉ= but names ending with a number =ùìÉ= did not
inherit highlighting, so I shifted the number to being a prefix instead.
+ For LaTeX, new lines are used to suggest opportunities for column breaks
  and are needed even if explicit columnbreaks are declared.
+ Use the nullary switch =:columnbreak:= to request a columnbreak; this has no
  effect on HTML export since HTML describes how text should be formatted on a
  browser, which can dynamically shrink and grow and thus it makes no sense to have
  hard columnbreaks.
+ We also provide ~ùìÉparallelNB~ for users who want ‚ÄòN‚Äôo ‚ÄòB‚Äôar separator
  between columns.

#+BEGIN_SRC emacs-lisp
(cl-loop for cols in '("1" "2" "3" "4" "5")
      do (cl-loop for rule in '("solid" "none")
      do (eval (read (concat
"(defun org-special-block-extras--" cols "parallel"
(if (equal rule "solid") "" "NB")
"(backend contents)"
"(format (pcase backend"
"(`html \"<div style=\\\"column-rule-style:" rule ";column-count:" cols ";\\\"%s</div>\")"
"(`latex \"\\\\par \\\\setlength{\\\\columnseprule}{" (if (equal rule "solid") "2" "0") "pt}"
"          \\\\begin{minipage}[t]{\\\\linewidth}"
"          \\\\begin{multicols}{" cols "}"
"          %s"
"          \\\\end{multicols}\\\\end{minipage}\"))"
"(s-replace \":columnbreak:\" (if (equal 'html backend) \"\" \"\\\\columnbreak\")
contents)))")))))
#+END_SRC
#
# Musa: If I use ‚Äú<div ‚Ä¶> %s</div>‚Äù, the ‚Äò>‚Äô causes some undesirable whitespace
# in the first column. Hence, omitting it.

We also use ~parallel~ as an alias for ~2parallel~: The forward declaration is
tangled at the top of the file, whereas the alias declarations are declared upon
mode activation ---after such functions have been declared.
 #+BEGIN_SRC emacs-lisp :noweb-ref forward-decls :tangle no
(declare-function org-special-block-extras--2parallel "org-special-block-extras" t t)
(declare-function org-special-block-extras--2parallelNB "org-special-block-extras" t t)
#+END_SRC
#+BEGIN_SRC emacs-lisp :noweb-ref enable-mode :tangle no
 (defalias 'org-special-block-extras--parallel
                  #'org-special-block-extras--2parallel)

        (defalias 'org-special-block-extras--parallelNB
                  #'org-special-block-extras--2parallelNB)
 #+END_SRC

* Colours
  :PROPERTIES:
  :CUSTOM_ID: Colours
  :END:

Let's develop blocks for colouring text and link types for inline colouring;
e.g., [[doc:org-special-block-extras--color][color]] and [[doc:org-special-block-extras--teal][teal]].

#+begin_box :background-color custard
Use kbd:M-x_list-colors-display to see a list of defined colour names in Emacs
  ---see [[http://muug.ca/mirror/ctan/macros/latex/contrib/xcolor/xcolor.pdf][xcolor]] for the LaTeX side and [[https://htmlcolorcodes.com/color-names/][htmlcolorcodes.com]] for the HTML side, or
  just visit http://latexcolor.com/ for both.
  # Use =M-: (defined-colors)= to see all colours that are supported on your Emacs.
#+end_box

#+html: <br>
:Examples:
#+BEGIN_SRC emacs-lisp :results value :wrap no :tangle no
(s-join "\n\n"
(cl-loop for c in org-special-block-extras/colors
      collect (format "#+begin_%s\n This text is %s!\n#+end_%s" c c c)))
#+END_SRC
:End:
#+begin_details A Picture and Block Examples

[[file:images/colours.jpg]]

--------------------------------------------------------------------------------

#+begin_parallel
#+begin_black
This text is black!
#+end_black

#+begin_blue
This text is blue!
#+end_blue

#+begin_brown
This text is brown!
#+end_brown

# #+begin_cyan
# This text is cyan!
# #+end_cyan

#+begin_darkgray
This text is darkgray!
#+end_darkgray

#+begin_gray
This text is gray!
#+end_gray

#+begin_green
This text is green!
#+end_green

#+begin_lightgray
This text is lightgray!
#+end_lightgray

#+begin_lime
This text is lime!
#+end_lime

#+begin_magenta
This text is magenta!
#+end_magenta

#+begin_olive
This text is olive!
#+end_olive

#+begin_orange
This text is orange!
#+end_orange

#+begin_pink
This text is pink!
#+end_pink

#+begin_purple
This text is purple!
#+end_purple

#+begin_red
This text is red!
#+end_red

#+begin_teal
This text is teal!
#+end_teal

#+begin_violet
This text is violet!
#+end_violet

#+begin_white
This text is white!
#+end_white

#+begin_yellow
This text is yellow!
#+end_yellow

#+end_parallel

#+end_details

:Header:
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load support for 20 colour custom blocks and 20 colour link types
#+END_SRC
:End:

#+html: <br>
#+begin_details Implementation of numerous colour blocks/links
We declare a list of colors that should be available on most systems.  Then
using this list, we evaluate the code necessary to produce the necessary
functions that format special blocks.

# - To add support for a colour =ùíû=, simply
#   ~(push 'ùíû org-special-block-extras--colors)~.
# #

By default, Org uses the ~graphicx~ LaTeX package which let's us colour text
---see its documentation [[http://ctan.mirror.rafal.ca/macros/latex/required/graphics/grfguide.pdf][here]].  For example, in an ~#+begin_export latex~ block,
the following produces blue coloured text.
#+begin_example latex
{  \color{blue}  This is a sample text in blue.  }
#+end_example
# Below, we format colour block types to essentially format block contents like
# this.

#+BEGIN_SRC emacs-lisp
(defvar org-special-block-extras--colors
  '(black blue brown cyan darkgray gray green lightgray lime
          magenta olive orange pink purple red teal violet white
          yellow)
  "Colours that should be available on all systems.")

(cl-loop for colour in org-special-block-extras--colors
      do (eval (read (format
                      "(org-special-block-extras--defblock %s (_ \"\" :face '(:foreground \"%s\")) nil
                        \"Show text in %s color.\"
                     (format (pcase backend
                     (`latex \"\\\\begingroup\\\\color{%s}%%s\\\\endgroup\\\\,\")
                     (_  \"<span style=\\\"color:%s;\\\">%%s</span>\"))
                     contents))" colour colour colour colour colour))))
#+END_SRC

#+RESULTS:


:Old:
#+BEGIN_SRC emacs-lisp :tangle no
(defvar org-special-block-extras--colors
  '(black blue brown cyan darkgray gray green lightgray lime
          magenta olive orange pink purple red teal violet white
          yellow)
  "Colours that should be available on all systems.")

(cl-loop for colour in org-special-block-extras--colors
      do (eval (read (format
                      "(defun org-special-block-extras--%s (backend contents)
                     (format (pcase backend
                     (`latex \"\\\\begingroup\\\\color{%s}%%s\\\\endgroup\\\\,\")
                     (_  \"<span style=\\\"color:%s;\\\">%%s</span>\"))
                     contents))"
                      colour colour colour))))
#+END_SRC
:End:
#+end_details

# (t      \"org-special-block-extras: Unsupported backend\")

#+html: <br>
#+begin_details Implementation of ‚Äòcolor‚Äô
For faster experimentation between colours, we provide a generic =color= block
that consumes a color argument.

  #+begin_src emacs-lisp
(org-special-block-extras--defblock color (color black    :face (lambda (colour)
           (if (member (intern colour) org-special-block-extras--colors)
               `(:foreground ,(format "%s" colour))
             `(:height 300
               :underline (:color "red" :style wave)
               :overline  "red" :strike-through "red")))) nil
  "Format text according to a given COLOR, which is black by default."
  (format (pcase backend
            (`latex "\\begingroup\\color{%s}%s\\endgroup\\,")
            (`html  "<span style=\"color:%s;\">%s</span>"))
          color contents))
#+end_src

:Old:
#+begin_src emacs-lisp :tangle no
(defun org-special-block-extras--color (backend contents)
  "Format CONTENTS according to the ‚Äò:color:‚Äô they specify for BACKEND."
  (-let* (((contents‚Ä≤ . (&alist 'color))
           (org-special-block-extras--extract-arguments contents 'color))
         (block-coloring
          (intern (format "org-special-block-extras--%s" (s-trim color)))))
    (if (member (intern (s-trim color)) org-special-block-extras--colors)
        (funcall block-coloring backend contents‚Ä≤)
      (error "Error: ‚Äú#+begin_color:%s‚Äù ‚áí Unsupported colour!" color))))
#+end_src
:End:
#+end_details

We want the syntax =red:text= to /render/ ‚Äòtext‚Äô with the colour red
in *both* the Emacs interface and in exported backends.

 [[file:images/colour_links.png]]

:Old:
 #+begin_src emacs-lisp :tangle no
;; [[ùíû:text‚ÇÄ][text‚ÇÅ]] ‚áí Colour ‚Äòtext‚Çñ‚Äô by ùíû, where k is 1, if present, otherwise 0.
;; If text‚ÇÅ is present, it is suggested to use ‚Äòcolor:ùíû‚Äô, defined below.
(cl-loop for colour in org-special-block-extras--colors
         do (org-link-set-parameters
             (format "%s" colour)
              :follow `(lambda (path) (message "Colouring ‚Äú%s‚Äù %s." path (quote ,colour)))
              :export `(lambda (label description backend)
                        (-let [block-colouring
                               (intern (format "org-special-block-extras--%s" (quote ,colour)))]
                          (funcall block-colouring backend (or description label))))
              :face `(:foreground ,(format "%s" colour))))

;; Generic ‚Äòcolor‚Äô link type [[color:ùíû][text]] ‚áí Colour ‚Äòtext‚Äô by ùíû.
;; If ùíû is an unsupported colour, ‚Äòtext‚Äô is rendered in large font
;; and surrounded by red lines.
(org-link-set-parameters "color"
   :follow (lambda (_))
   :face (lambda (colour)
           (if (member (intern colour) org-special-block-extras--colors)
               `(:foreground ,(format "%s" colour))
             `(:height 300
               :underline (:color "red" :style wave)
               :overline  "red" :strike-through "red")))
 :help-echo (lambda (_ __ position)
              (save-excursion
                (goto-char position)
                (-let* (((&plist :path) (cadr (org-element-context))))
                  (if (member (intern path) org-special-block-extras--colors)
                      "Colour links just colour the descriptive text"
                    (format "Error: ‚Äúcolor:%s‚Äù ‚áí Unsupported colour!" path)))))
   :export (lambda (colour description backend)
             (-let [block-colouring
                    (intern (format "org-special-block-extras--%s" colour))]
               (if (member (intern colour) org-special-block-extras--colors)
                   (funcall block-colouring backend description)
                 (error "Error: ‚Äúcolor:%s‚Äù ‚áí Unsupported colour!" colour)))))
 #+end_src
:End:

#+begin_center
Observe: red:this green:is cyan:super teal:neato, purple:amigos! and [[color:brown][this is brown ‚Äòcolor‚Äô link]] and [[color:orange][this one is an orange ‚Äòcolor‚Äô link!]]

 Also: If we try to use an unsupported colour ‚Äòwombo‚Äô, we render the descriptive
 text larger in Emacs along with a tooltip explaining why this is the case;
 e.g.,
 =[[color:wombo][hi]]=.
#+end_center

( Markdown does not support colour; go look at the HTML or PDF! )
** ¬† ~latex-definitions~ for hiding LaTeX declarations in HTML
   :PROPERTIES:
   :CUSTOM_ID: latex-definitions-for-hiding-LaTeX-declarations-in-HTML
   :END:
 :Fails_idea:
 Larger example:
 #+begin_mathjax
 red:\Sigma

 #+end_mathjax
 :End:

 Before indicating desirable next steps, let us produce an incidentally useful
 special block type.

 #+latex: \vspace{1em}
 We may use LaTeX-style commands such as ~{\color{red} x}~ by enclosing them in
 =$=-symbols to obtain ${\color{red}x}$ and other commands to present mathematical
 formulae in HTML.  This is known as the MathJax tool ---Emacs' default HTML
 export includes it.

 #+latex: \vspace{1em}
 It is common to declare LaTeX definitions for convenience, but such
 declarations occur within ~$~-delimiters and thereby produce undesirable extra
 whitespace. We declare the ~latex_definitions~ block type which avoids
 displaying such extra whitespace in the resulting HTML.

#+begin_details ‚Äòlatex-definitions‚Äô Implementation
 #+begin_src emacs-lisp
(org-special-block-extras--defblock latex-definitions nil nil
  "Declare but do not display the CONTENTS according to the BACKEND."
  (format (pcase backend
            ('html "<p style=\"display:none\">\\[%s\\]</p>")
            (_ "%s"))
          raw-contents))
 #+end_src

:OLD:
 #+begin_src emacs-lisp :tangle no
(defun org-special-block-extras--latex-definitions (backend contents)
  "Declare but do not display the CONTENTS according to the BACKEND."
  (cl-loop for (this that) in (-partition 2 '("<p>" ""
                                           "</p>" ""
                                           "\\{" "{"
                                           "\\}" "}"))
        do (setq contents (s-replace this that contents)))
  (format (pcase backend
            ('html "<p style=\"display:none\">\\[%s\\]</p>")
            (_ "%s"))
          contents))
 #+end_src

 - Org escapes ~{,}~ in LaTeX export, so we need to ‚Äòunescape‚Äô them.
  This is clearly a hack.
 :End:
#+end_details

#+latex: \iffalse

 Here ---which you cannot see, as /desired/---is an example usage, where we
 declare ~\LL~ to produce a violet left parenthesis. We then use these to produce
 an example of quantification notation.
 #+begin_latex-definitions
\def\LL{\color{violet}(}
\def\RR{\color{violet})}
 #+end_latex-definitions

# +begin_org-demo :source-color white :result-color white
 $$
 {\color{teal}\bigoplus}
 _{   {\color{violet} x}
    = {\color{red} a}}
 ^{\color{cyan} b}
    {\color{brown}{\,f\, x}}
 \quad=\quad
            {\color{brown}{f\,\LL  {\color{red} a} \RR}}
 \;{\color{teal}\oplus}\; {\color{brown}{f \, \LL a + 1 \RR }}
 \;{\color{teal}\oplus}\; {\color{brown}{f \, \LL a + 2 \RR }}
 \;{\color{teal}\oplus}\; \cdots
 \;{\color{teal}\oplus}\; {\color{brown}{f \, \LL {\color{cyan} b} \RR}}
 $$
 | [[teal:‚äï]]   | /Loop sequentially with loop-bodies fused using [[teal:‚äï][‚äï]]/ |
 | /[[violet:x]]/ | /Use [[violet:x][x]] as the name of the current element/         |
 | /[[red:a]]/    | /Start with [[violet:x][x]] being [[red:a][a]]/                             |
 | /[[cyan:b]]/   | /End with [[violet:x][x]] being [[cyan:b][b]]/                               |
 | /[[color:brown][f x]]/      | /At each [[violet:x][x]] value, compute [[color:brown][f x]]/                     |

 # Note that /[[color:brown][f x]]/ is obtained by =/[[color:brown][f x]]/.=
# +end_org-demo

( Markdown does not support MathJax; go look at the HTML or PDF! )

#+latex: \fi

--------------------------------------------------------------------------------

Unfortunately, MathJax does not easily support arbitrary HTML elements to occur
within the =$=-delimiters ---see [[https://stackoverflow.com/questions/58883048/mathjax-or-similar-render-arbitrary-html-element-inside-expression][this]] and [[https://github.com/mathjax/MathJax/issues/1707][this]] for ‚Äòworkarounds‚Äô.  As such, the
MathJax producing the above example is rather ugly whereas its subsequent
explanatory table is prettier on the writer's side.

:Verbatim_pasted_from_the_above_THIS_link:
MathJax will not process math that contains HTML tags (other than a select few),
so you will not be able to do the kind of replacements inside an expression like
you are attempting to do here.

#+begin_export html
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  CommonHTML: {
    styles: {
      //
      // remove CSS for '.mjx-math *'
      //
      '.mjx-math *': {
        display: null,
        '-webkit-box-sizing': null,
        '-moz-box-sizing': null,
        'box-sizing': null,
        'tex-align': null
      },
      //
      // add CSS for .mjx-math span instead
      //
      '.mjx-math span': {
        display: 'inline-block',
        '-webkit-box-sizing': 'context-box !important',
        '-moz-box-sizing': 'context-box !important',
        'box-sizing': 'context-box !important',
        'tex-align': 'left'
      },
      //
      // override display for .mjx-char spans
      //
      'span.mjx-char': {
        display: 'block'
      }
    }
  }
});
MathJax.Hub.Register.StartupHook("TeX Jax Ready", function () {
  var MML = MathJax.ElementJax.mml;
  var TEX = MathJax.InputJax.TeX;
  TEX.Definitions.macros.insertHTML = 'InsertHTML';
  TEX.Parse.Augment({
    InsertHTML: function (name) {
      var html = this.GetArgument(name).replace(/^\s*<!--\s*/,'').replace(/\s*-->\s*$/,'');
      var span = MathJax.HTML.Element('mjx-reset', {style: {display:'inline-block'}});
      span.innerHTML = html;  // serious security risk if users can enter math
      span.setAttribute("xmlns","http://www.w3.org/1999/xhtml");
      var mml = MML["annotation-xml"](MML.xml(span)).With({encoding:"application/xhtml+xml",isToken:true});
      this.Push(MML.semantics(mml));
    }
  });
});
</script>
<script id="MathJax-script" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS_CHTML" defer></script>

<div style="xfont-size: 150%">
$$x + \left(\,\insertHTML{<!--
<table width="100" height="100"
  style="display:inline-table; vertical-align:-.25em; background:red; border:5px solid green;
  box-sizing:border-box !important">
<tr><td style="text-align:center">abc</td></tr>
</table>
-->}\,\right) + y$$
</div>


$$x+\left(\insertHTML{<!--
<i>this</i> is <b>html</b>
-->}\right)+y$$
#+end_export
:End:

 #+latex: \vspace{1em}
[[color:orange][Going forward,]] it would be nice to easily have our colour links work within
a mathematical special block.

#+latex: \vspace{1em}
[[color:orange][Moreover,]] it would be nice to extend the =color= block type to take multiple
arguments, say, =c‚ÇÅ c‚ÇÇ ‚Ä¶ c‚Çô= such that:

| /n/ | Behaviour                                                                          |
|---+------------------------------------------------------------------------------------|
| 0 | No colouring; likewise if no arguments altogether                                  |
| 1 | Colour all entries using the given colour c‚ÇÅ                                       |
| /n/ | Paragraph --region separated by a new line-- =i= is coloured by =c‚Çñ= where =k = i mod n= |

Besides having a colourful article, another usage I envision for this
generalisation would be when rendering text in multiple languages; e.g., use red
and blue to interleave Arabic poetry with its English translation.

* Nice Keystroke Renditions: kbd:C-h_h
  :PROPERTIES:
  :CUSTOM_ID:
  :END:

Anyone who writes /about/ Emacs will likely want to mention keystrokes in an
aesthetically pleasing way, such as [[kbd:doit][C-u 80 -]] to insert 80 dashes
or kbd:C-c_C-e_h_o to export an Org-mode file to HTML.

- If there is a description, we render it in keystroke style.
- If there is only a label, we translate underscores into spaces.

[[file:./images/kbd.png]]

#+begin_details Implementation

#+begin_src emacs-lisp
(org-link-set-parameters
 "kbd"
  :follow (lambda (_))
  :export (lambda (label description backend)
            (format (pcase backend
                      ('html "<kbd> %s </kbd>")
                      ('latex "\\texttt{%s}")
                      (_ "%s"))
                    (or description (s-replace "_" " " label)))))
#+end_src

#+RESULTS:
| :follow | (lambda (_)) | :export | (lambda (label description backend) (format (pcase backend ('html <kbd> %s </kbd>) ('latex \texttt{%s}) (_ %s)) (or description (s-replace _   label)))) |

The following styling rule is used to make the keystrokes displayed nicely.
#+begin_src emacs-lisp :noweb-ref enable-mode :tangle no
(defvar org-special-block-extras--kbd-html-setup nil
  "Has the necessary keyboard styling HTML beeen added?")

(unless org-special-block-extras--kbd-html-setup
  (setq org-special-block-extras--kbd-html-setup t)
(setq org-html-head-extra
 (concat org-html-head-extra
"
<style>
/* From: https://endlessparentheses.com/public/css/endless.css */
/* See also: https://meta.superuser.com/questions/4788/css-for-the-new-kbd-style */
kbd
{
  -moz-border-radius: 6px;
  -moz-box-shadow: 0 1px 0 rgba(0,0,0,0.2),0 0 0 2px #fff inset;
  -webkit-border-radius: 6px;
  -webkit-box-shadow: 0 1px 0 rgba(0,0,0,0.2),0 0 0 2px #fff inset;
  background-color: #f7f7f7;
  border: 1px solid #ccc;
  border-radius: 6px;
  box-shadow: 0 1px 0 rgba(0,0,0,0.2),0 0 0 2px #fff inset;
  color: #333;
  display: inline-block;
  font-family: 'Droid Sans Mono', monospace;
  font-size: 80%;
  font-weight: normal;
  line-height: inherit;
  margin: 0 .1em;
  padding: .08em .4em;
  text-shadow: 0 1px 0 #fff;
  word-spacing: -4px;

  box-shadow: 2px 2px 2px #222; /* MA: An extra I've added. */
}
</style>")))
#+end_src

#+end_details

[[color:orange][Going forward]], it would be nice to render =kbd:ùí≥= links in a pretty way within
Emacs itself.

* ¬† /‚ÄúLink Here!‚Äù/ & OctoIcons
  :PROPERTIES:
  :CUSTOM_ID: Link-Here-OctoIcons
  :END:

Use the syntax =link-here:name= to create an anchor link that alters the URL with
=#name= as in ‚Äúlink-here:name‚Äù
---it looks and behaves like the Github generated links for a heading.
Use case: Sometimes you want to explicitly point to a particular location in an
article, such as within a =#+begin_details= block, this is a possible way to do so.

Likewise, get OctoIcons with the syntax =octoicon:ùí≥= where =ùí≥= is one of =home,
link, mail, report, tag, clock=: octoicon:home, octoicon:link, octoicon:mail,
octoicon:report, octoicon:tag, octoicon:clock.

- Within =octoicon:ùí≥= and =link-here:ùí≥= the label =ùí≥= determines the
  OctoIcon shown and the name of the local link to be created, respectively.
  + Descriptions, as in =[[link:label][description]]=, are ignored.
- Besides the HTML backend, such links are silently omitted.

#+begin_details Six OctoIcons and Implementation
The following SVGs are obtained from: https://primer.style/octicons/

#+begin_src emacs-lisp
(defvar
 org-special-block-extras--supported-octoicons
 (-partition 2
 '(
   home
   "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16
   16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\"
   d=\"M16 9l-3-3V2h-2v2L8 1 0 9h2l1 5c0 .55.45 1 1 1h8c.55 0
   1-.45 1-1l1-5h2zm-4 5H9v-4H7v4H4L2.81 7.69 8 2.5l5.19 5.19L12
   14z\"></path></svg>"

   link
   "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16
   16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\"
   d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69
   3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10
   5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0
   2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5
   0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55
   13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"

   mail
   "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14
   16\" width=\"14\" height=\"16\"><path fill-rule=\"evenodd\"
   d=\"M0 4v8c0 .55.45 1 1 1h12c.55 0 1-.45
   1-1V4c0-.55-.45-1-1-1H1c-.55 0-1 .45-1 1zm13 0L7 9 1 4h12zM1
   5.5l4 3-4 3v-6zM2 12l3.5-3L7 10.5 8.5 9l3.5 3H2zm11-.5l-4-3
   4-3v6z\"></path></svg>"

   report
   "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16
   16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\"
   d=\"M0 2a1 1 0 011-1h14a1 1 0 011 1v9a1 1 0 01-1 1H7l-4
   4v-4H1a1 1 0 01-1-1V2zm1 0h14v9H6.5L4 13.5V11H1V2zm6
   6h2v2H7V8zm0-5h2v4H7V3z\"></path></svg>"

   tag
   "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 15
   16\" width=\"15\" height=\"16\"><path fill-rule=\"evenodd\"
   d=\"M7.73 1.73C7.26 1.26 6.62 1 5.96 1H3.5C2.13 1 1 2.13 1
   3.5v2.47c0 .66.27 1.3.73 1.77l6.06 6.06c.39.39 1.02.39 1.41
   0l4.59-4.59a.996.996 0 000-1.41L7.73 1.73zM2.38
   7.09c-.31-.3-.47-.7-.47-1.13V3.5c0-.88.72-1.59
   1.59-1.59h2.47c.42 0 .83.16 1.13.47l6.14 6.13-4.73
   4.73-6.13-6.15zM3.01 3h2v2H3V3h.01z\"></path></svg>"

   clock
   "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14
   16\" width=\"14\" height=\"16\"><path fill-rule=\"evenodd\"
   d=\"M8 8h3v2H7c-.55 0-1-.45-1-1V4h2v4zM7 2.3c3.14 0 5.7 2.56
   5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 011.3 8c0-3.14 2.56-5.7
   5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14
   7-7-3.14-7-7-7z\"></path></svg>"))

"An association list of supported OctoIcons.

Usage: (cadr (assoc 'ICON org-special-block-extras--supported-octoicons))")
#+end_src

#+RESULTS:
: org-special-block-extras--supported-octoicons

#+begin_src emacs-lisp
;; Show an OctoIcon: home, link, mail, report, tag, clock
(org-link-set-parameters
  "octoicon"
  :follow (lambda (_))
  :export (lambda (icon _ backend)
    (pcase backend
      (`html  (format
               (s-collapse-whitespace
                (cadr (assoc (intern icon)
                             org-special-block-extras--supported-octoicons)))))
      (_ ""))))

;; Export a link to the current location in an Org file.
(org-link-set-parameters
  "link-here"
  :follow (lambda (path) (message "This is a local anchor link named ‚Äú%s‚Äù" path))
  :export  (lambda (label _ backend)
    (pcase backend
      (`html  (format (s-collapse-whitespace
          "<a class=\"anchor\" aria-hidden=\"true\" id=\"%s\"
          href=\"#%s\">%s</a>")
                      label label (cadr (assoc 'link
                              org-special-block-extras--supported-octoicons))))
      (_ ""))))
#+end_src

# [[color:orange][Going forward,]]
Going forward, it would be desirable to provide a non-whitespace alternative for
the LaTeX rendition.  More usefully, before the HTML export hook, we could place
such ‚Äòlink-here‚Äô links before every org-title produce clickable org-headings,
similar to Github's ---the necessary ingredients are likely [[https://github.com/alhassy/emacs.d#ensuring-useful-html-anchors][here]].

# [[color:orange][Moreover]],
Moreover, it may be useful to have =octoicon:ùí≥|url= so the resulting
OctoIcon is optionally a link to the given =url=. Another direction
would be to support more, if not all, the possible OctoIcons.

#+end_details

#+html: <br>
#+begin_org-demo Example :source-color custard :result-color custard
link-here:example-location (Click the icon and see the URL has changed!)
#+end_org-demo

* COMMENT Badge Links
  :PROPERTIES:
  :CUSTOM_ID: Badge-Links
  :END:

link-here:badges
Badges provide a quick and colourful summary of key features of a project,
such as whether it's maintained, its license, and if it's documented.
# Badges are little coloured boxes; e.g., those found all over Github.  Such
# eye-candy can be obtained from https://shields.io/, which has many examples.

#+caption: An Emacs interface to https://shields.io/
[[file:images/badges.png]]

#+begin_quote
As people who are passionate about writing great code we display "badges" in our
code repositories to signal to fellow developers that we set ourselves high
standards for the code we write, think of them as the software-equivalent of
the brand on your jeans or other reliable product. --- [[https://github.com/dwyl/repo-badges][repo-badges]]
#+end_quote

:Header:
#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The badge link types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
:End:

** The =badge= Link and derived Reddit/Github/Twitter socials
   :PROPERTIES:
   :CUSTOM_ID: The-badge-Link
   :END:

The implementation is a bit lengthy since it attempts to capture a useful
portion of the shilelds.io badge interface.
#+begin_src emacs-lisp
(org-link-set-parameters "badge"
  :follow (lambda (path) (--> (s-split "|" path)
                         (or (nth 3 it) path)
                         (browse-url it)))
  :export #'org-special-block-extras--link--badge)

(defvar org-special-block-extras--link--twitter-excitement
  "This looks super neat (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà:"
  "The string prefixing the URL being shared.")

(defun org-special-block-extras--link--badge
  (label _ backend &optional social)
  "Export a link presented as an SVG badge.

The LABEL should be of the shape ‚Äòkey|value|color|url|logo‚Äô
resulting in a badge ‚Äú|key|value|‚Äù where the ‚Äòkey‚Äô
is coloured grey and the ‚Äòvalue‚Äô is coloured ‚Äòcolor‚Äô.

The optional SOCIAL toggle indicates if we want an icon for
Twitter, Reddit, Github, etc, instead of a badge.
When SOCIAL is provided, we interpret LABEL as an atomic string.

+ Only the syntax ‚Äòbadge:key|value|color|url‚Äô is supported.
  - ‚Äòkey‚Äô and ‚Äòvalue‚Äô have their underscores interpreted as spaces.
     ‚áí Underscores are interpreted as spaces;
     ‚áí ‚Äò__‚Äô is interpreted as an underscore;
     ‚áí ‚Äò|‚Äô is not a valid substring, but ‚Äò-, %, ?‚Äô are okay.
  - ‚Äò|color|url|logo‚Äô are optional;
     if ‚Äòurl‚Äô is ‚Äò|here‚Äô then the resulting badge behaves
     like ‚Äòlink-here:key‚Äô.
  - ‚Äòcolor‚Äô may be: ‚Äòbrightgreen‚Äô or ‚Äòsuccess‚Äô,
                    ‚Äòred‚Äô         or ‚Äòimportant‚Äô,
                    ‚Äòorange‚Äô      or ‚Äòcritical‚Äô,
                    ‚Äòlightgrey‚Äô   or ‚Äòinactive‚Äô,
                    ‚Äòblue‚Äô        or ‚Äòinformational‚Äô,
            or ‚Äògreen‚Äô, ‚Äòyellowgreen‚Äô, ‚Äòyellow‚Äô, ‚Äòblueviolet‚Äô, ‚Äòff69b4‚Äô, etc.
+ Such links are displayed using a SVG badges
  and so do not support the DESCRIPTION syntax
  ‚Äò[[link:label][description]]‚Äô.
+ Besides the HTML BACKEND, such links are silently omitted."
  (-let* (((lbl msg clr url logo) (s-split "|" label))
          (_ (unless (or (and lbl msg) social)
               (error "%s\t‚áí\tBadges are at least ‚Äúbadge:key|value‚Äù!" label)))
          ;; Support dashes and other symbols
          (_ (unless social
               (setq lbl (s-replace "-" "--" lbl)
                     msg (s-replace "-" "--" msg))
               (setq lbl (url-hexify-string lbl)
                     msg (url-hexify-string msg))))
          (img (format "<img src=\"https://img.shields.io/badge/%s-%s-%s%s\">"
                        lbl msg clr
                        (if logo (concat "?logo=" logo) ""))))
    (when social
      (-->
          `(("reddit"            "https://www.reddit.com/r/%s")
            ("github/followers"  "https://www.github.com/%s?tab=followers")
            ("github/forks"      "https://www.github.com/%s/fork")
            ("github"            "https://www.github.com/%s")
            ("twitter/follow"    "https://twitter.com/intent/follow?screen_name=%s")
            ("twitter/url"
             ,(format
               "https://twitter.com/intent/tweet?text=%s:&url=%%s"
               (s-replace "%" "%%"
                          (url-hexify-string
                           org-special-block-extras--link--twitter-excitement)))
             ,(format
               "<img src=\"https://img.shields.io/twitter/url?url=%s\">"
               label)))
        (--filter (s-starts-with? (cl-first it) social) it)
        (car it)
        (or it (error "Badge: Unsupported social type ‚Äú%s‚Äù" social))
        (setq url (format (cl-second it) label)
              img (or (cl-third it)
                      (format "<img src=\"https://img.shields.io/%s/%s?style=social\">"
                      social label)))))
    (pcase backend
        ('html (if url
                 (if (equal url "here")
                     (format "<a id=\"%s\" href=\"#%s\">%s</a>" lbl lbl img)
                   (format "<a href=\"%s\">%s</a>" url img))
               img))
        ('latex "")
        ;; Markdown syntax: [![image title](url to get image)](url to go to on click)
        (_
         (setq img (s-chop-suffix "\">" (s-chop-prefix "<img src=\"" img)))
         (format "[![badge:%s](%s)](%s)" lbl img url)))))
#+end_src

#+RESULTS:
: org-special-block-extras--link--badge

We now form the specialised link types for social media.
#+begin_src emacs-lisp
(cl-loop for (social link) in '(("reddit/subreddit-subscribers" "reddit-subscribe-to")
                             ("github/stars")
                             ("github/watchers")
                             ("github/followers")
                             ("github/forks")
                             ("twitter/follow")
                             ("twitter/url?=url=" "tweet"))
      for link‚Ä≤ = (or link (s-replace "/" "-" social))
      do (org-link-set-parameters link‚Ä≤
           :export (eval `(-cut org-special-block-extras--link--badge
                         <> <> <> ,social))))
#+end_src

#+RESULTS:

[[badge:key][yes]]

[[badge:key|value|informational|Here|Elixir]]

** COMMENT Begin omitting from LaTeX output                                  :ignore:
   :PROPERTIES:
   :CUSTOM_ID: Begin-omitting-from-LaTeX-output
   :END:
#+latex: \iffalse
** COMMENT Example Social Icons
   :PROPERTIES:
   :CUSTOM_ID: Example-Social-Icons
   :END:
Syntax:
#+begin_example org
reddit-subscribe-to:exact-name-of-a-subreddit

github-stars:user-name/repository-name

github-watchers:user-name/repository-name

github-forks:user-name/repository-name

github-followers:user-name

twitter-follow:user-name

tweet:url
#+end_example

Here are some examples.

+ Things I like:
  reddit-subscribe-to:emacs
  reddit-subscribe-to:common_lisp
  reddit-subscribe-to:coolguides
  reddit-subscribe-to:shia
  # reddit-subscribe-to:LispMemes
  # reddit-subscribe-to:ProgrammerHumor

+ Info about my cheatsheets:
  github-stars:alhassy/CheatSheet
  github-watchers:alhassy/CheatSheet
  github-forks:alhassy/CheatSheet
  tweet:https://github.com/alhassy/org-special-block-extras

+ My profile:
  github-followers:alhassy
  twitter-follow:musa314

** COMMENT Example Badges
   :PROPERTIES:
   :CUSTOM_ID: Example-Badges
   :END:

The general syntax is as follows, with *only the first 2* are mandatory,
with the colour defaulting to green, and the url and logo both to nil.
We can thus have ~badge:label|message~
#+begin_example org
# Standard template
badge:key|value|colour|url|logo

# Minimal template
badge:key|value

# Only show a coloured logo pointed to its location
badge:||colour|here|logo
#+end_example

+ badge:key|value|informational|Here|Elixir
  - Standard template; with URL pointing to current location which is named
    =#key=

+ badge:example_with_spaces,_-,_and_%|points_right_here|orange|here
  - Use ‚Äò_‚Äô to denote spaces

+ badge:no_colour|given
  - Only two items given: =badge:key|value=.

+ badge:empty_value||informational
  - =badge:key||colour=

+ badge:|value
  - No key; =badge:|value=

+ badge:||green
  - No key; nor value: =badge:||green=

** COMMENT Example Colours
   :PROPERTIES:
   :CUSTOM_ID: Example-Colours
   :END:
+ badge:|red|red badge:|critical|critical
+ badge:|blue|blue badge:|informational|informational
+ badge:|brightgreen|brightgreen badge:|success|success
+ badge:|orange|orange badge:|important|important
+ badge:|lightgrey|lightgrey badge:|inactive|inactive
+ badge:|green|green
+ badge:|yellowgreen|yellowgreen
+ badge:|yellow|yellow
+ badge:|blueviolet|blueviolet
+ badge:|ff69b4|ff69b4
+ badge:|9cf|9cf
+ ...

Consult https://htmlcolorcodes.com/ to see the HEX code of any other colour you
wish to use; e.g., badge:|1d8348|1d8348

** COMMENT Example Badge Icons
   :PROPERTIES:
   :CUSTOM_ID: Example-Badge-Icons
   :END:

 Here are a few free SVG icons for popular brands from https://simpleicons.org/.

 + ‚ÄúFire‚Äù ::
    badge:||grey|here|Elixir
    badge:||grey|here|tinder
    badge:||grey|here|codeigniter
    badge:||grey|here|prometheus
    badge:||grey|here|sparkpost
 + ‚ÄúMessaging‚Äù ::
    badge:||grey|here|quip
    badge:||grey|here|WeChat
    badge:||grey|here|google-hangouts
    badge:||grey|here|hackhands
    badge:||grey|here|google-messages
    badge:||grey|here|Tor
    badge:||grey|here|Slack
 + ‚ÄúEmacs‚Äù ::
    badge:||white|here|gnu-emacs
    badge:||white|here|spacemacs
    badge:||grey|here|vim
    badge:||grey|here|neovim
    badge:||grey|here|gnu
    badge:||grey|here|github
    badge:||grey|here|acm
    badge:||grey|here|wikipedia
    badge:||grey|here|microsoft-excel
    badge:||grey|here|microsoft-word
    badge:||grey|here|dropbox
    badge:||grey|here|google-scholar
    badge:||grey|here|google
    badge:||grey|here|google-translate
    badge:||grey|here|ghost
    badge:||grey|here|helm
    badge:||grey|here|apache-openoffice
    badge:||grey|here|buffer
    # badge:||grey|here|adobe-fonts
    #    badge:||grey|here|google-calendar
 + ‚ÄúSocial‚Äù ::
    badge:||grey|here|google-cast
    badge:||grey|here|youtube
    badge:||grey|here|discord
    badge:||grey|here|facebook
    badge:||grey|here|google-hangouts
    badge:||grey|here|whatsapp
    badge:||grey|here|skype
    badge:||grey|here|arXiv
    badge:||grey|here|reddit
    badge:||grey|here|stack-overflow
    badge:||grey|here|stack-exchange
    badge:||grey|here|linkedin
    badge:||grey|here|twitter
    badge:||grey|here|jabber
 + ‚ÄúLightbulb‚Äù ::
    badge:||grey|here|lighthouse
    badge:||grey|here|google-keep
    badge:||grey|here|minds
 + ‚ÄúProgramming‚Äù ::
    badge:||grey|here|git
    badge:||grey|here|ruby
    badge:||grey|here|scala
    badge:||grey|here|OCaml
    badge:||grey|here|javascript
    badge:||grey|here|gnu-bash
    badge:||grey|here|powershell
    badge:||grey|here|LaTeX
    badge:||grey|here|java
    badge:||grey|here|kotlin
    badge:||grey|here|haskell
    badge:||grey|here|coffeescript
    badge:||grey|here|purescript
    badge:||grey|here|rust
    badge:||grey|here|typescript
    badge:||grey|here|css3
    badge:||grey|here|python
    badge:||grey|here|c
    badge:||grey|here|clojure
    badge:||grey|here|lua
    badge:||grey|here|adobe-acrobat-reader
    #   badge:||grey|here|c-+-+
    # badge:||grey|here|perl
    #    badge:||grey|here|c#
 + ‚ÄúMiscellaneous‚Äù ::
    badge:||grey|here|read-the-docs
    badge:||grey|here|buy-me-a-coffee
    badge:||grey|here|gimp
    badge:||grey|here|mega
    badge:||grey|here|nintendo-3ds
    badge:||grey|here|paypal
    badge:||grey|here|pinboard
    badge:||grey|here|mocha
    badge:||grey|here|Gitea
    badge:||grey|here|instacart
    badge:||grey|here|openStreetMap
    badge:||grey|here|amazon
    badge:||grey|here|svg
    badge:||grey|here|rss
    badge:||grey|here|swagger
    badge:||grey|here|pastebin
    badge:||grey|here|skyliner
    badge:||grey|here|iTunes   badge:||grey|here|gulp
      # badge:||grey|here|pokemon
   # + ‚ÄúMusic‚Äù ::
   #    badge:||grey|here|1001-track-lists
   #    badge:||grey|here|auda-city
   #    badge:||grey|here|dribble
   #    badge:||grey|here|leaflet
   #    badge:||grey|here|youtube-gaming
    badge:||grey|here|GIMP
    badge:||grey|here|atom

** COMMENT Common Project Badges
   :PROPERTIES:
   :CUSTOM_ID: Common-Project-Badges
   :END:

+ badge:Emacs|23/26/28|green|https://www.gnu.org/software/emacs|gnu-emacs

+ badge:Org|9.3.6|blue|https://orgmode.org|gnu

+ [[badge:org-special-block-extras|1.0|informational|https://alhassy.github.io/org-special-block-extras/README.html|Gnu-Emacs][org-special-block-extras badge]]
  # + twitter:https://github.com/alhassy/org-special-block-extras
+ [[badge:melpa|pending|critical|https://github.com/alhassy/emacs.d#use-package-the-start-of-initel|github][melpa badge]]

+ [[badge:docs|literate|success|https://github.com/alhassy/emacs.d#what-does-literate-programming-look-like|read-the-docs][read-the-docs badge]]
  badge:wiki|github|informational|here|wikipedia

+ badge:code_coverage|88%|green|here|codecov
  badge:build|passing|success|here|azure-pipelines

+ badge:author|musa_al-hassy|purple|https://alhassy.github.io/|nintendo-3ds

+ badge:author|musa_al-hassy|purple|https://alhassy.github.io/|gimp

+ [[badge:license|GNU_3|informational|https://www.gnu.org/licenses/gpl-3.0.en.html|read-the-docs][gnu 3 license badge]]

+ badge:issue_tracking|github|informational|here|github

+ badge:help_forum|discourse|informational|here|discourse

+ badge:social_chat|gitter|informational|https://gitter.im/explore|gitter

+ badge:Maintained?|yes|success
  badge:Maintained?|no|critical
  badge:No_Maintenance_Intended|√ó|critical|http://unmaintained.tech/
  ---Interesting!

+ badge:website|up|success
  badge:website|down|critical

+ badge:Ask_me|anything|1abc9c
  badge:contributions|welcome|green|https://github.com/alhassy/org-special-block-extras/issues
+ badge:Made_with|Python,_LaTeX,_MathJax,_and_Emacs_Org-mode|1f425
** COMMENT End omitting from LaTeX output                                            :ignore:
   :PROPERTIES:
   :CUSTOM_ID: End-omitting-from-LaTeX-output
   :END:
 #+latex: \fi
** COMMENT Next Steps
  :PROPERTIES:
  :CUSTOM_ID: Next-Steps-badges
  :END:

[[color:orange][Going forward,]] it would be desirable to provide non-whitespace alternatives
for the LaTeX backend. {{{newline}}}
[[edcomm:Author][That is why no examples are shown in the PDF]] It would
also be useful to have badges redirect to their URL, if any, upon a user's
click. Finally, it may be useful to colour the =|=-separated fields of a badge
link and provide a tooltip indicating which value corresponds to which
field. This would make the interface more welcoming to new users.

* Tooltips for Glossaries, Dictionaries, and Documentation
  :PROPERTIES:
  :CUSTOM_ID: Tooltips-for-Glossaries-Dictionaries-and-Documentation
  :END:

#+begin_documentation Category Theory :label "cat"
A theory of typed composition; e.g., typed monoids.
#+end_documentation

Let's make a link type =doc= that shows a tooltip documentation ---e.g., glossary
or abbreviation--- for a given label.
E.g., user-declared doc:cat and Emacs-retrieved doc:loop and doc:thread-last ^_^

# LaTeX does not allow figures in minipages, so just ignoring them in Latex
# export
#+latex: \iffalse
#+begin_details Eye-candy ---A gallery of images
#+caption: Tooltips for documentation and glossary items --in the browser!
[[file:images/tooltips_browser.png]]

#+caption: Tooltips for documentation and glossary items --in Emacs!
[[file:images/tooltips_emacs.png]]

#+caption: Tooltips for documentation and glossary items --in the PDF!
[[file:images/tooltips_pdf.png]]

:Hide:
#+caption: Declaring documentation-glossary items
[[file:images/tooltips_declaration.png]]
:End:

#+end_details
#+latex: \fi

*Full Example: ‚Ä¶*


#+latex_header: \newunicodechar{œÄ}{\ensuremath{\pi}}

_User enters ‚Ä¶_
#+begin_example org
,#+begin_documentation Existential Angst :label "ex-angst"
A negative feeling arising from freedom and responsibility.

Also known as
1. /Existential Dread/, and
2. *Existential Anxiety*.

Perhaps a distraction, such as [[https://www.w3schools.com][visiting W3Schools]], may help ;-)

Then again, ~coding~ can be frustrating at times, maybe have
a slice of pie with maths by reading ‚Äú$e^{i√óœÄ} + 1 = 0$‚Äù as a poem ;-)
,#+end_documentation
#+end_example

#+begin_documentation Existential Angst :label ex-angst
A negative feeling arising from freedom and responsibility.

Also known as
1. /Existential Dread/, and
2. *Existential Anxiety*.

Perhaps a distraction, such as [[https://www.w3schools.com][visiting W3Schools]], may help ;-)

Then again, ~coding~ can be frustrating at times, maybe have
a slice of pie with maths by reading ‚Äú$e^{i√óœÄ} + 1 = 0$‚Äù as a poem ;-)
#+end_documentation

_Then‚Ä¶_ =doc:ex-angst= gives us doc:ex-angst,
or using a description: [[doc:ex-angst][‚Äúexistence is pain‚Äù?]]
( ~[[doc:ex-angst][‚Äúexistence is pain‚Äù?]]~ )

:Labelless_example:
#+begin_documentation Existential Angsty
A negative feeling arising from freedom and responsibility.

bye
#+end_documentation

doc:Existential_Angsty
:End:

#+begin_quote
As it stands, Emacs tooltips *only* appear after an export has happened:
The export updates the dictionary variable which is used for the tooltips
utility.

The ~:label~ is optional; when not provided it defaults to the name of the entry
with spaces replaced by ‚Äò_‚Äô.  For more, see
doc:org-special-block-extras--documentation.

Entry names do not need to be unique, but labels do!
( The labels are like the addresses used to look up an entry. )

# Moreover, a documentation block may have multiple entries ---the =:name:= argument
# must appear first, then the =:label:=, and the remaining text is the
# description-documentation of the given name.
#+end_quote


#+begin_details More Examples

| Supported                            | Example          | Source                            |
|--------------------------------------+------------------+-----------------------------------|
| No description                       | doc:cat          | ~doc:cat~                           |
| With description and code font       | [[doc:nat-trans][=polymorphism=]]   | ~[[doc:nat-trans][=polymorphism=]]~ |
| Fallback; e.g., arbitrary ELisp Docs | doc:thread-first | ~doc:thread-first~                  |

Notice how hovering over items makes them appear, but to make them disappear you
should click on them or scroll away.  This is ideal when one wants to have
multiple ‚Äòdefinitions‚Äô visible ;-)

Below are the entries in my personal glossary ;-)
#+begin_src emacs-lisp :exports results :results replace value :results table pp replace :tangle no
(ignore-errors (--map (concat "doc:" it) (mapcar #'car org-special-block-extras--docs-from-libraries)))
#+end_src

#+RESULTS:
| ("doc:cat" "doc:Category_Theory" "doc:category_theory" "doc:polymorphism" "doc:nat-trans" "doc:Natural_Transformation" "doc:natural_transformation" "doc:nil" "doc:Calculational_Proof" "doc:calculational_proof" "doc:nil" "doc:Algorithmic_Problem_Solving" "doc:algorithmic_problem_solving" "doc:nil" "doc:Expression" "doc:expression" "doc:nil" "doc:Specification" "doc:specification" "doc:nil" "doc:Programming" "doc:programming" "doc:nil" "doc:Distributive" "doc:distributive" "doc:nil" "doc:Identity" "doc:identity" "doc:nil" "doc:Associative" "doc:associative" "doc:Operational_Semantics" "doc:Axiomatic_Semantics" "doc:Semantics" "doc:semantics" "doc:Propositional_Calculus" "doc:Calculus" "doc:calculus" "doc:nil" "doc:Metatheorem" "doc:metatheorem" "doc:nil" "doc:Theorem" "doc:theorem") |

In the export, it looks like some names are repeated, but in the source one
would notice that we have /labels/ in both upper and lower cases and with underscores ;-)
They just happen to be referring to the same /named/ entry.
#+end_details

** Implementation Details: =doc= link, ~documentation~ block, and [[https://iamceege.github.io/tooltipster/#triggers][tooltipster]]
   :PROPERTIES:
   :CUSTOM_ID: The-doc-link-type
   :END:
We begin by making use of a list of documentation-glossary entries
---a lightweight database of information, if you will.
#+begin_src emacs-lisp
(defvar org-special-block-extras--docs nil
  "An alist of (label name description) entries; our glossary.

Example use: (-let [(name description) (cdr (assoc 'label docs))] ‚ãØ)")
#+end_src

For example, we may use =add-to-list= to add an entry only if it is not already in
the list.
#+name: startup-code
#+begin_src emacs-lisp :tangle no
(add-to-list 'org-special-block-extras--docs
  '("cat" "Category Theory" "A theory of typed  composition; e.g., typed monoids."))
#+end_src

We may wish to use Emacs' ~documentation~ command to retrieve entries ---this is
useful for an online article that refers to unfamiliar Emacs terms ;-) To avoid
copy-pasting documentation entries from one location to another, users may
declare a fallback method. Besides Emacs' =documentation=, the fallback can be
refer to a user's personal ‚Äòglobal glossary‚Äô variable ---which may live in their
Emacs' init file---, for more see: doc:org-special-block-extras-docs-load-libraries
#+begin_src emacs-lisp
(defvar org-special-block-extras--docs-fallback
  (lambda (label) (list label label (documentation (intern label))))
  "The fallback method to retriving documentation or glossary entries.")
#+end_src

#+RESULTS:
: org-special-block-extras--docs-fallback

#+begin_details Implementation matter for user libraries
#+begin_src emacs-lisp
(defvar org-special-block-extras--docs-libraries
  '("documentation.org")
  "List of Org files that have ‚Äò#+begin_documentation‚Äô blocks that should be loaded
   for use with the ‚Äòdoc:ùí≥‚Äô link type.")

(cl-defun org-special-block-extras-docs-load-libraries
    (&optional (libs org-special-block-extras--docs-libraries))
"Load user's personal documentation libraries.

If no LIBS are provided, simply use those declared
org-special-block-extras--docs-libraries.

See org-special-block-extras--docs-from-libraries.
"
(interactive)
(loop for lib in libs
      do (with-temp-buffer
           (insert-file-contents lib)
           ;; doc only activates after an export
           (-let [org-export-with-broken-links t] (org-html-export-as-html))
           (kill-buffer)
           (delete-window)
           (setq org-special-block-extras--docs-from-libraries (-concat org-special-block-extras--docs org-special-block-extras--docs-from-libraries))
           (setq org-special-block-extras--docs nil))))

(defvar org-special-block-extras--docs-from-libraries nil

  "The alist of (label name description) entries loaded from the libraries.

The initial value ‚Äò-1‚Äô is used to indicate that no libraries have been loaded.
The ‚Äòdoc:ùí≥‚Äô link will load the libraries, possibly setting this variable to ‚Äònil‚Äô,
then make use of this variable when looking for documentation strings.

Interactively call org-special-block-extras-docs-load-libraries
to force your documentation libraries to be reloaded.

See also org-special-block-extras--docs-libraries.
")
#+end_src

When the mode is actually enabled, then we load the user's libraries.
#+begin_src emacs-lisp :noweb-ref enable-mode :tangle no
;; Ensure user's documentation libraries have loaded
(org-special-block-extras-docs-load-libraries)
#+end_src

#+RESULTS:

#+end_details

Let's keep track of where documentation comes from ---either the current
article or from the fallback--- so that we may process it later on.
#+begin_src emacs-lisp
(defvar org-special-block-extras--docs-GLOSSARY nil
  "Which words are actually cited in the current article.

We use this listing to actually print a glossary using
‚Äòshow:GLOSSARY‚Äô.")
#+end_src

#+RESULTS:
: org-special-block-extras--docs-GLOSSARY

Now HTML exporting such links as tooltips and displaying them in Emacs as
tooltips happens in two stages: First we check the documentation, if there is no
entry, we try the fallback ---if that falls, an error is reported at export
time. E.g., upon export =doc:wombo= will produce a no-entry error.

#+begin_details ‚Äòdoc‚Äô link implementation
#+name: startup-code
#+begin_src emacs-lisp
(-let [name&doc
       (lambda (lbl)
         ;; Look for ‚Äòlbl‚Äô from within the current buffer first, otherwise look among the loaded libraries.
         (-let [(_ name doc) (or (assoc lbl org-special-block-extras--docs) (assoc lbl org-special-block-extras--docs-from-libraries))]
           ;; If there is no documentation, try the fallback.
           (unless doc
             (setq doc
                   (condition-case nil
                       (funcall org-special-block-extras--docs-fallback lbl)
                     (error
                      (error "Error: No documentation-glossary entry for ‚Äú%s‚Äù!"
                             lbl))))
             (setq name (nth 1 doc))
             (setq doc (nth 2 doc)))
           (list name doc)))]

(org-link-set-parameters
 "doc"
 :follow (lambda (_) ())
 :export
   `(lambda (label description backend)
     (-let [(name docs) (funcall ,name&doc label)]
       (add-to-list 'org-special-block-extras--docs-GLOSSARY
                    (list label name docs))
       (setq name (or description name))
       (pcase backend
         (`html  (format "<abbr class=\"tooltip\" title=\"%s\">%s</abbr>"
                         ;; Make it look pretty!
                         (thread-last docs
                           (s-replace "  " "&emsp;") ; Preserve newlines
                           (s-replace "\n" "<br>")   ; Preserve whitespace
                           ;; Translate Org markup
                           (s-replace-regexp "/\\(.+?\\)/" "<em>\\1</em>")
                           (s-replace-regexp "\\*\\(.+?\\)\\*" "<strong>\\1</strong>")
                           (s-replace-regexp "\\~\\([^ ].*?\\)\\~" "<code>\\1</code>")
                           (s-replace-regexp "=\\([^ ].*?\\)=" "<code>\\1</code>")
                           (s-replace-regexp "\\$\\(.+?\\)\\$" "<em>\\1</em>")
                           (s-replace-regexp "\\[\\[\\(.*\\)\\]\\[\\(.*\\)\\]\\]" "\\2 (\\1)")
                           ;; Spacing in math mode
                           (s-replace-regexp "\\\\quad" "&#x2000;")
                           (s-replace-regexp "\\\\," "&#8194;") ;; en space
                           (s-replace-regexp "\\\\;" "&#8195;") ;; em space
                           ;; The presence of ‚Äò\"‚Äô in tooltips breaks things, so omit them.
                           (s-replace-regexp "\\\"" "''"))
                         name))
         ;; Make the current word refer to its glosary entry;
         ;; also declare the location that the glossary should refer back to.
         (`latex (format (concat "\\hyperref"
                                 "[org-special-block-extras-glossary-%s]{%s}"
                                "\\label{org-special-block-extras-glossary"
                                "-declaration-site-%s}")
                         label name label)))))
  :help-echo
  `(lambda (_ __ position)
    (save-excursion
      (goto-char position)
      (-let* (((&plist :path) (cadr (org-element-context)))
              ((name doc) (funcall ,name&doc path)))
        (format "[%s] %s :: %s" path name doc))))))
#+end_src

Since tooltips are not clickable and do not support MathJax,
we have manually transpiled what are perhaps the most common
instances of Org-markup: Bold, emphasises, code/verbatim, math, and links.
#+end_details

  # Our mode highlights documented text, with tooltips, as red.
  # #+begin_src emacs-lisp :noweb-ref enable-mode
  # (setq org-html-head-extra
  #       (concat org-html-head-extra
  #               (format "<style> abbr {color: red;} </style>")))
  #     #+end_src

Things look great at the HTML side and on the Emacs side for *consuming*
documented text.  Besides being inconvenient, we cannot with good conscious
force the average user to write Lisp as we did for the ~doc:cat~ entry. We turn to
the problem of *producing* documentation entries with a block type interface...

#+begin_details ‚Äòdocumentation‚Äô Implementation: An Example of Mandatory Arguments and Using ‚Äòraw-contents‚Äô
#+BEGIN_SRC emacs-lisp
(org-special-block-extras--defblock documentation
  (name (error "Documentation block: Name must be provided"))
  (label nil show nil color "green")
  "Register the dictionary entries in CONTENTS to the dictionary variable.

The dictionary variable is ‚Äòorg-special-block-extras--docs‚Äô.

A documentation entry may have its LABEL, its primary identifier,
be:
1. Omitted
2. Given as a single symbol
3. Given as a many aliases '(lbl‚ÇÄ lbl‚ÇÅ ‚Ä¶ lbl‚Çô)

The third case is for when there is no canonical label to refer to
an entry, or it is convenient to use multiple labels for the same
entry.

In all of the above cases, two additional labels are included:
The entry name with spaces replaced by underscores, and again but
all lower case.

Documentation blocks are not shown upon export;
unless SHOW is non-nil, in which case they are shown
using the ‚Äòbox‚Äô block, with the provided COLOR passed to it.

In the futture, it may be nice to have an option to render tooltips.
That'd require the ‚Äòdoc:ùí≥‚Äô link construction be refactored via a ‚Äòdefun‚Äô."
  (unless (consp label) (setq label (list label)))
  (push (s-replace " " "_" name) label)
  (push (downcase (s-replace " " "_" name)) label)
  (loop for l in label
        do  (add-to-list 'org-special-block-extras--docs
                         (mapcar #'s-trim (list (format "%s" l) name (substring-no-properties raw-contents)))))
  ;; Should the special block show something upon export?
  ""); (if show (org-special-block-extras--blockcall box name :background-color color raw-contents) "")
#+END_SRC

#+RESULTS:
| :export | (lambda (label description backend) (s-replace-all `((#+end_export . ) (,(format #+begin_export %s backend) . )) (org-special-block-extras--documentation backend description label))) | :help-echo | (lambda (window object position) (save-excursion (goto-char position) (-let* (((&plist :path :format :raw-link :contents-begin :contents-end) (cadr (org-element-context))) (description (when (equal format 'bracket) (copy-region-as-kill contents-begin contents-end) (substring-no-properties (car kill-ring))))) (format %s |


:Older_approach:
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-special-block-extras--documentation (_ contents)
  "Register the dictionary entries in CONTENTS to the dictionary variable.

The dictionary variable is ‚Äòorg-special-block-extras--docs‚Äô.

Documentation blocks are not shown upon export."
  ;; Strip out any <p> tags
  ;; Musa: Make these three lines part of the core utility?
  (setq contents (substring-no-properties contents))
  (setq contents (s-replace-regexp "<p>" "" contents))
  (setq contents (s-replace-regexp "</p>" "" contents))
  (setq contents (s-trim contents))
  (cl-loop for entry in (cdr (s-split ":name:" contents))
        do   (-let [(contents‚Ä≤ . (&alist 'label 'name))
                    (org-special-block-extras--extract-arguments
                     (s-concat ":name:" entry) 'label 'name)]
               (unless (and label name)
                 (error (message-box (concat "#+begin_documentation: "
                           "Ensure the entry has a :name followed by a :label "
                            "\n\n " contents))))
               (add-to-list 'org-special-block-extras--docs
                            (mapcar #'s-trim (list label name contents‚Ä≤)))))
  ;; The special block is not shown upon export.
  "")
  #+END_SRC
:End:

#+end_details

# #¬† [[https://iamceege.github.io/tooltipster/#triggers][Tooltipster]] ---Fast, Sleek, & Beautiful Tooltips
Thus far, Org entities are converted into HTML tags such as =<i>= for italicised
text. However, HTML's default tooltip utility ---using ~title="‚ãØ"~ in a ~div~---
does not render arbitrary HTML elements. Moreover, the default tooltip utility
is rather slow. As such, we move to using /tooltipster/.  The incantation below
sets up the required magic to make this happen.

#+begin_details "Fast, Sleek, and Beautiful Tooltips: Touching ‚Äòorg-html-head-extra‚Äô"
#+begin_src emacs-lisp :noweb-ref enable-mode :tangle no
(defvar org-special-block-extras--tooltip-html-setup nil
  "Has the necessary HTML beeen added?")

(unless org-special-block-extras--tooltip-html-setup
  (setq org-special-block-extras--tooltip-html-setup t)
(setq org-html-head-extra
 (concat org-html-head-extra
"
<link rel=\"stylesheet\" type=\"text/css\" href=\"https://alhassy.github.io/org-special-block-extras/tooltipster/dist/css/tooltipster.bundle.min.css\"/>

<link rel=\"stylesheet\" type=\"text/css\" href=\"https://alhassy.github.io/org-special-block-extras/tooltipster/dist/css/plugins/tooltipster/sideTip/themes/tooltipster-sideTip-punk.min.css\" />

<script type=\"text/javascript\">
    if (typeof jQuery == 'undefined') {
        document.write(unescape('%3Cscript src=\"https://code.jquery.com/jquery-1.10.0.min.js\"%3E%3C/script%3E'));
    }
</script>

 <script type=\"text/javascript\"            src=\"https://alhassy.github.io/org-special-block-extras/tooltipster/dist/js/tooltipster.bundle.min.js\"></script>

  <script>
         $(document).ready(function() {
             $('.tooltip').tooltipster({
                 theme: 'tooltipster-punk',
                 contentAsHTML: true,
                 animation: 'grow',
                 delay: [100,500],
                 // trigger: 'click'
                 trigger: 'custom',
                 triggerOpen: {
                     mouseenter: true
                 },
                 triggerClose: {
                     originClick: true,
                     scroll: true
                 }
 });
         });
     </script>

<style>
   abbr {color: red;}

   .tooltip { border-bottom: 1px dotted #000;
              color:red;
              text-decoration: none;}
</style>
")))
    #+end_src

Note that we have a conditional in the middle to avoid loading jQuery multiple
times ---e.g., when one uses the =read-the-org= them in combination with this
library. Multiple imports lead to broken features.
#+end_details

** Wait, what about the LaTeX?
   :PROPERTIES:
   :CUSTOM_ID: hola
   :END:

   A PDF is essentially a fancy piece of paper, so tooltips will take on the
   form of glossary entries: Using =doc:ùí≥= will result in the word =ùí≥= being printed
   as a hyperlink to a glossary entry, which you the user will eventually
   declare using =show:GLOSSARY=; moreover, the glossary entry will also have a
   link back to where the =doc:ùí≥= was declared.
   E.g., doc:defmacro and doc:lambda.

   We make a ~show:ùí≥~ link type to print the value of the variable =ùí≥=
   as follows, with =GLOSSARY= being a reserved name.
   #+begin_details Implementation of ‚Äòshow‚Äô
 #+begin_src emacs-lisp
(let ((whatdo (lambda (x)
                (message
                          (concat "The value of variable  %s  will be placed "
                                  "here literally upon export, "
                                  "which is: \n\n %s")
                          (s-upcase x)
                          (if (equal x "GLOSSARY")
                              (format "A cleaned up presentation of ...\n%s"
                                      org-special-block-extras--docs-GLOSSARY)
                          (pp (eval (intern x))))))))
  (org-link-set-parameters
    "show"
    :face '(:underline "green")
    :follow whatdo
    :help-echo `(lambda (_ __ position)
                  (save-excursion
                    (goto-char position)
                    (-let [(&plist :path) (cadr (org-element-context))]
                      (funcall ,whatdo path))))
    :export
     (lambda (label _description backend)
      (cond ((not (equal label "GLOSSARY")) (prin1 (eval (intern label))))
            ((equal 'html backend) "") ;; Do not print glossary in HTML
            (t
             (-let ((fstr (concat "\\vspace{1em}\\phantomsection"
                                 "\\textbf{%s}\\quad"
                                 "\\label{org-special-block-extras-glossary-%s}"
                                 "%s See page "
                                 "\\pageref{org-special-block-extras"
                                 "-glossary-declaration-site-%s}"))
                    (preserve ;; preserve whitespace
                     (lambda (x)
                       (s-replace "\n" " \\newline{\\color{white}.}"
                                  (s-replace "  " " \\quad "
                                             ;; Hack!
                                             (s-replace "&" "\\&" x))))))
               (s-join "\n\n"
                       (cl-loop for (label name doc)
                             in org-special-block-extras--docs-GLOSSARY
                             collect (format fstr name label
                                             (when doc (funcall preserve doc))
                                             label)))))))))
 #+end_src
#+end_details

 As an example, we know have generic sentences:
 | =My name is show:user-full-name and I am using Emacs show:emacs-version ^_^= |
 |----------------------------------------------------------------------------|
 | My name is show:user-full-name and I am using Emacs show:emacs-version ^_^ |

 For example, here is a word whose documentation is obtained from Emacs
 rather than me being written: doc:thread-last.
 If you click on it, in the LaTeX output, you will be directed to the glossary
 at the end of this article ---glossaries are not printed in HTML rendering.

 /Neato! The whitespace in the documentation is preserved in the LaTeX output as
 is the case for HTML./

 If we decide to erase a =doc:ùí≥=, then it should not longer appear in the
 printed glossary listing. Likewise, a =documentation= block has its Org markup
 exported according to the backend being exported to, hence if we decide to
 switch between different backends then only the first rendition will be used
 /unless/ we erase the database each time after export.
#+begin_src emacs-lisp :noweb-ref enable-mode :tangle no
;; Actual used glossary entries depends on the buffer; so clean up after each export
(advice-add #'org-export-dispatch
  :after (lambda (&rest _)
  (setq org-special-block-extras--docs-GLOSSARY nil
        org-special-block-extras--docs nil)))
#+end_src

** Next Steps
  :PROPERTIES:
  :CUSTOM_ID: Next-Steps-tooltips
  :END:

# [[color:orange][Going forward,]]
Going forward, it'd be nice to have URLs work well upon export for =documentation=
block types; whereas they currently break the HTML export.
- If an entry is referenced multiple times, such as doc:cat, then it would be
  nice if the glossary referred to the pages of all such locations rather than
  just the final one.
- The glossary current prints in order of appearance; we may want to have
  the option to print it in a sorted fashion.
- Perhaps use the line activation feature to provide link tooltips
  immediately rather than rely on exportation.
- The =show= link type could accept an arbitrary Lisp expression as
  a bracketed link.
- When one clicks on a =doc= documentation link, it would be nice to ‚Äòjump‚Äô
  to its associated =#+begin_documentation= declaration block in the current
  buffer, if possible.

* Summary
  :PROPERTIES:
  :CUSTOM_ID: Summary
  :END:

#+begin_quote
The full article may be read as a [[https://alhassy.github.io/org-special-block-extras/index.pdf][PDF]] or as [[https://alhassy.github.io/org-special-block-extras][HTML]] ---or visit the [[https://github.com/alhassy/org-special-block-extras][repo]].
#+end_quote

link-here:summary
Let =ùíû= be any of the following: =black=, =blue=, =brown=, =cyan=, =darkgray=, =gray=, =green=,
=lightgray=, =lime=, =magenta=, =olive orange=, =pink=, =purple=, =red=, =teal=, =violet=, =white=,
=yellow=.

| Idea                   | Documentation               | Link only?          |
|------------------------+-----------------------------+---------------------|
| Colours                | =ùíû=, [[doc:org-special-block-extras--latex-definitions][latex-definitions]], [[doc:org-special-block-extras--color][color]] |                     |
| Parallel               | [[doc:org-special-block-extras--parallel][parallel]]                    |                     |
| Editorial Comments     | [[doc:org-special-block-extras--remark][remark]]                      |                     |
| Folded Details         | [[doc:org-special-block-extras--details][details]] ,  [[doc:org-special-block-extras--box][box]]              |                     |
| Keystrokes             |                             | ~kbd~                 |
| OctoIcons & Link Here  |                             | ~octoicon~, ~link-here~ |
| Documentation-Glossary | [[doc:org-special-block-extras--documentation][documentation]]               | ~doc~                 |
# | Badges                 | [[doc:org-special-block-extras--parallel][parallel] |            |
# | OctoIcons & Link Here  | [[doc:org-special-block-extras--octoicon][octoicon]] , [[doc:org-special-block-extras--link-here][link-here]]        | ‚úì          |

# There are also the social badge links:
# =reddit-subscribe-to=, =github-followers=, =github-forks=, =github-stars, github-watchers=, =twitter-follow=, and =tweet=.

# [[color:orange][Going forward,]] it'd be nice to a centralised ‚Äòuser manual‚Äô which may be
# consulted rather than reading the literate implementation above.

** Installation Instructions
   :PROPERTIES:
   :CUSTOM_ID: Installation-Instructions
   :END:

Manually or using [[https://github.com/alhassy/emacs.d#installing-emacs-packages-directly-from-source][quelpa]]:
#+BEGIN_SRC emacs-lisp :tangle no
;; ‚ü®0‚ü© Download the org-special-block-extras.el file manually or using quelpa
(quelpa '(org-special-block-extras :fetcher github :repo
"alhassy/org-special-block-extras"))

;; ‚ü®1‚ü© Have this always active in Org buffers
(add-hook #'org-mode-hook #'org-special-block-extras-mode)

;; ‚ü®1‚Ä≤‚ü© Or use: ‚ÄúM-x org-special-block-extras-mode‚Äù to turn it on/off
#+END_SRC

*Or* with [[https://github.com/alhassy/emacs.d#use-package-the-start-of-initel][use-package]]:
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-special-block-extras
  :ensure t
  :hook (org-mode . org-special-block-extras-mode))
#+END_SRC

Then, provide support for a new type of special block named =foo= that, say
replaces all words /foo/ in a block, by declaring the following.
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-special-block-extras--foo (backend contents)
  "The FOO block type replaces all occurances of ‚Äòfoo‚Äô with ‚Äòbar‚Äô,
unless a ‚Äò:replacement:‚Äô is provided."
  (-let [(contents‚Ä≤ . (&alist 'replacement))
           (org-special-block-extras--extract-arguments contents 'replacement)]
    (s-replace "foo" (or replacement "bar") contents‚Ä≤)))
#+END_SRC

** Minimal working example
   :PROPERTIES:
   :CUSTOM_ID: Minimal-working-example
   :END:

The following example showcases the prominent features of this library.

#+begin_example org
,#+begin_parallel
[[color:orange][Are you excited to learn some Lisp?]] blue:yes!

Pop-quiz: How does doc:apply work?
,#+end_parallel

,#+begin_details
link-here:solution
Syntactically, ~(apply f '(x0 ... xN)) = (f x0 ... xN)~.

[[remark:Musa][Ain't that cool?]]

[[color:purple][We can apply a function to a list of arguments!]]
,#+end_details

,#+html: <br>
,#+begin_box
octoicon:report Note that kbd:C-x_C-e evaluates a Lisp form!
#+end_box

#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{tcolorbox}
#+latex: In the LaTeX output, we have a glossary.

show:GLOSSARY
#+end_example

The above section, [[#practice_problems][‚Äòpractice problems‚Äô]], presents a few puzzles to get you
comfortable with ~defblock~ ;-)


** COMMENT Live MWE
   :PROPERTIES:
   :CUSTOM_ID: Live-MWE
   :END:
#+begin_parallel
[[color:orange][Are you excited to learn some Lisp?]] blue:yes!

Pop-quiz: How does doc:apply work?
#+end_parallel

#+begin_details
link-here:solution
Syntactically, ~(apply f '(x0 ... xN)) = (f x0 ... xN)~.

[[remark:Musa][Ain't that cool?]]

[[color:purple][We can apply a function to a list of arguments!]]
#+end_details

#+html: <br>
#+begin_box
octoicon:report Note that kbd:C-x_C-e evaluates a Lisp form!
#+end_box

#+LATEX_HEADER: \usepackage{multicol}
#+LATEX_HEADER: \usepackage{tcolorbox}
#+latex: In the LaTeX output, we have a glossary.

show:GLOSSARY

#
# badge:thanks|for_reading
#
# tweet:https://github.com/alhassy/org-special-block-extras
#
# badge:|buy_me_a¬†coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee
#
** Bye!
   :PROPERTIES:
   :CUSTOM_ID: Bye
   :END:

:Broke_Org_9_1:
badge:thanks|for_reading
tweet:https://github.com/alhassy/org-special-block-extras
badge:|buy_me_a¬†coffee|gray|https://www.buymeacoffee.com/alhassy|buy-me-a-coffee
:End:
#+begin_export html
<p>
<img src="https://img.shields.io/badge/thanks-for_reading-nil">
<a href="https://twitter.com/intent/tweet?text=This%20looks%20super%20neat%20%28%E2%80%A2%CC%80%E1%B4%97%E2%80%A2%CC%81%29%D9%88%3A:&url=https://github.com/alhassy/org-special-block-extras"><img src="https://img.shields.io/twitter/url?url=https://github.com/alhassy/org-special-block-extras"></a>
<a href="https://www.buymeacoffee.com/alhassy"><img src="https://img.shields.io/badge/-buy_me_a%C2%A0coffee-gray?logo=buy-me-a-coffee"></a>
</p>
#+end_export

* Lisp Postamble                                                   :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Postamble
  :END:
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'org-special-block-extras)

;;; org-special-block-extras.el ends here
#+END_SRC
* COMMENT MELPA Checks
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-MELPA-Checks
  :END:
https://github.com/riscy/melpazoid

1. In Github repo: Create new file ‚áí License.txt ‚áí Select template ‚áí GNU 3
2. Ensure first line ends with: -*- lexical-binding: t; -*-
3. Include appropriate standard keywords;
   #+begin_src emacs-lisp
(pp finder-known-keywords)
   #+end_src

   #+RESULTS:
   #+begin_example
   ((abbrev . "abbreviation handling, typing shortcuts, and macros")
    (bib . "bibliography processors")
    (c . "C and related programming languages")
    (calendar . "calendar and time management tools")
    (comm . "communications, networking, and remote file access")
    (convenience . "convenience features for faster editing")
    (data . "editing data (non-text) files")
    (docs . "Emacs documentation facilities")
    (emulations . "emulations of other editors")
    (extensions . "Emacs Lisp language extensions")
    (faces . "fonts and colors for text")
    (files . "file editing and manipulation")
    (frames . "Emacs frames and window systems")
    (games . "games, jokes and amusements")
    (hardware . "interfacing with system hardware")
    (help . "Emacs help systems")
    (hypermedia . "links between text or other media types")
    (i18n . "internationalization and character-set support")
    (internal . "code for Emacs internals, build process, defaults")
    (languages . "specialized modes for editing programming languages")
    (lisp . "Lisp support, including Emacs Lisp")
    (local . "code local to your site")
    (maint . "Emacs development tools and aids")
    (mail . "email reading and posting")
    (matching . "searching, matching, and sorting")
    (mouse . "mouse support")
    (multimedia . "images and sound")
    (news . "USENET news reading and posting")
    (outlines . "hierarchical outlining and note taking")
    (processes . "processes, subshells, and compilation")
    (terminals . "text terminals (ttys)")
    (tex . "the TeX document formatter")
    (tools . "programming tools")
    (unix . "UNIX feature interfaces and emulators")
    (vc . "version control")
    (wp . "word processing"))
   #+end_example
4. Use #' instead of ' for function symbols
5. Use ‚Äò-‚Äô as a separator, not ‚Äò/‚Äô.
6. Consider reading:
   https://github.com/bbatsov/emacs-lisp-style-guide#the-emacs-lisp-style-guide
7. Use cl-loop, cl-first, cl-second, cl-third instead of loop, first, second, third
8. byte-compile and address any concerns
9. =M-x checkdoc= on the lisp file to ensure it passes expected style issues.
   - Symbols =nil, t= should not appear in single quotes.
10. Ensure it byte-compiles without any problems.
11. Ensure that package-linter raises no issues; i.e., the following has no result.
     #+BEGIN_SRC emacs-lisp
 (use-package package-lint)
 (-let [it "org-special-block-extras.el"]
  (ignore-errors (kill-buffer it))
  (find-file-other-window it)
  (package-lint-buffer it))
 #+END_SRC
12. Create a recipe file by invoking: M-x package-build-create-recipe
    - Place it in: melpa/recipes/
    - The name of the file should be the name of the package, no extension.

       #+BEGIN_SRC emacs-lisp :tangle ~/melpa/recipes/org-special-block-extras
    (org-special-block-extras :fetcher github :repo "alhassy/org-special-block-extras")
    #+END_SRC
13. Commit and push everything in your project's repo!
14. Ensure the recipe builds successfully:
    #+BEGIN_SRC shell
    cd ~/melpa; rm ~/melpa/packages/org-special-block-extras-*; make recipes/org-special-block-extras
    #+END_SRC

    #+RESULTS:
    : ‚Ä¢ Building package org-special-block-extras ...

15. Ensure the package installs properly from within Emacs:

      #+BEGIN_SRC emacs-lisp
(package-install-file "~/melpa/packages/org-special-block-extras-20200417.238.el")
#+END_SRC
      #+RESULTS:
      : #s(package-desc org-special-block-extras (20200417 238) "Twenty-four new custom blocks for Org-mode" ((s (1 12 0)) (dash (2 16 0)) (emacs (24 4))) single nil nil ((:authors ("Musa Al-hassy" . "alhassy@gmail.com")) (:maintainer "Musa Al-hassy" . "alhassy@gmail.com") (:url . "https://alhassy.github.io/org-special-block-extras")) nil)

13. [@13] Produce a dedicated pull request branch

    #+begin_src emacs-lisp
    (magit-status "~/melpa")
    #+end_src

    + Now =b c= to checkout a new branch.
    + Push this branch on your melpa fork.
    + Go to the https://github.com/melpa/ repo and
      there'll be a big green PR button ^_^
* COMMENT Making ~README.org~
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Making-README-org
  :END:

  Evaluate the following source block with ~C-c C-c~ to produce a ~README~ file.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.md
     # HTML: <h1> 29 new custom blocks and 32 link types for Emacs' Org-mode (‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà </h1>
     ,#+OPTIONS: toc:nil d:nil
     ,#+INCLUDE: \"org-special-block-extras.org::*Abstract\"
     # INCLUDE: \"org-special-block-extras.org::*Summary\"
     HELLO!
    ")
    (let ((org-export-use-babel nil)
      (org-mode)
      (org-md-export-to-markdown))))
#+END_SRC

*Then* use =grip= to see that this looks reasonable.

* COMMENT Glossary                                                           :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Glossary
  :END:

#+latex: \section*{Glossary}
#+latex: \addcontentsline{toc}{section}{Glossary}

 show:GLOSSARY
* Footnotes
  :PROPERTIES:
  :CUSTOM_ID: Footnotes
  :END:

[fn:1] See [[http://www.cs.nott.ac.uk/~pszgmh/fold.pdf][/A tutorial on the universality and expressiveness of fold/]] and
[[http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/urs.pdf][/Unifying Structured Recursion Schemes/]]
