#+title: Musa Al-hassy's Personal Glossary
# +OPTIONS: broken-links:auto

doc:Theorem
#+begin_documentation Theorem :show t :color blue
A /theorem/ is a syntactic object, a string of symbols with a particular property.

A /theorem/ of a calculus is either an axiom or the conclusion of an inference
rule whose premises are theorems.

Different axioms could lead to the same set of theorems, and many texts use
different axioms.
#+end_documentation

doc:Metatheorem
#+begin_documentation Metatheorem :show t
A /theorem/ in the technical sense is an expression derived
from axioms using inference rules.

A /metatheorem/ is a general *statement* about a logic that
one argues to be *true*.

For instance, “any two theorems are equivalent” is a statement that speaks about
expressions which happen to be theorems. A logic may not have the linguistic
capability to speak of its own expressions and so the statement may not be
expressible as an expression *within* the logic ---and so cannot be a theorem of
the logic.

For instance, the logic 𝒑𝑞 has expressions formed from the symbols “𝒑”, “𝒒”, and
“-” (dash). It has the axiom schema $x𝒑-𝒒x-$ and the rule “If $x𝒑y𝒒z$ is a theorem
then so is $x-𝒑y-𝒒z-$”. Notice that $x, y, z$ are /any/ strings of dashes;
the language of this logic does not have variables and so cannot even speak
of its own expressions, let alone its own theorems!

[Informal] theorems about [technical, logic-specific] theorems are thus termed
‘metatheorems’.
#+end_documentation

doc:Calculus ([[doc:Propositional_Calculus][Propositional Calculus]])
#+begin_documentation Calculus :label Propositional_Calculus :show t :color blue
A /calculus/ is a method or process of reasoning by calculation
with symbols. A /propositional calculus/ is a method of calculating with Boolean
(or propositional) expressions.
#+end_documentation

doc:Semantics
#+begin_documentation Semantics :label (Axiomatic_Semantics Operational_Semantics) :show t
Often operations are defined by how they are evaluated (“operationally”), we
take the alternative route of defining operations by how they can be manipulated
(“axiomatically”); i.e., by what properties they satisfy.

For instance, we may define basic manipulative properties of operators ---i.e.,
/axioms/--- by considering how the operators behave operationally on particular
expressions. That is, one may use an operational, intuitive, approach to obtain
an axiomatic specification (characterisation, interface) of the desired
properties.

More concretely, since $(p ≡ q) ≡ r$ and $p ≡ (q ≡ r)$ evaluate to
the same value for any choice of values for $p, q, r$, we may insist that a part
of the definition of equivalence is that it be an associative operation.

Sometimes a single axiom is not enough to ‘pin down’ a unique operator ---i.e.,
to ensure we actually have a well-defined operation--- and other times this is
cleanly possible; e.g., given an ordering ‘≤’(‘⇒, ⊆, ⊑’) we can define minima
‘↓’ (‘∧, ∩, ⊓’) by the axiom: “x ↓ y is the greatest lower bound”; i.e., $z ≤ x
↓ y \quad≡\quad z ≤ x \,∧\, z ≤ y$.
#+end_documentation

doc:Associative
#+begin_documentation Associative :show t :color blue
An operation _⊕_ is associative when it satisfies $(p ⊕ q) ⊕ r = p ⊕ (q ⊕ r)$.

Associativity allows us to be informal and insert or delete pairs of
parentheses in sequences of ⊕'s, just as we do with sequences of
additions ---e.g., $a + b + c + d$ is equivalent to $a + (b + c) + d$.

Hence, we can write $p ⊕ q ⊕ r$ instead of $(p ⊕ q) ⊕ r$ or $p ⊕ (q ⊕ r)$.

When an operation is associative, it is best to avoid “making a choice” of how
sequences of ⊕ should be read, by using parentheses ---unless to make things
clear or explicit for manipulation.

--------------------------------------------------------------------------------

More generally, for any two operations _⊕_ and _⊞_, the “(left to right) mutual
associativity of ⊕ and ⊞” is the property $(x ⊕ y) ⊞ z = x ⊕ (y ⊞ z)$. It allows
us to omit parentheses in mixed sequences of ⊕ and ⊞. For instance, addition and
subtraction are (left to right) mutually associative.

#+end_documentation

doc:Identity
#+begin_documentation Identity :show t
An operation _⊕_ has identity 𝑰 when it satisfies $𝑰 ⊕ x = x = x ⊕ 𝑰$.

If it satisfies only the first equation, $𝑰 ⊕ x = x$, one says
that “𝑰 is a left-identity for ⊕”. If it satisfies only the second
equation, $x ⊕ 𝑰 = x$, one says that “𝑰 is a right-identity for ⊕”.

For example, implication only has a left identity, $(false ⇒ x) = x$, and
subtraction only has a right identity, $(x - 0) = x$.

An identity implies that occurrences of “⊕ 𝑰” and “𝑰 ⊕” in an expression are
redundant. Thus, $x ⊕ 𝑰$ may be replaced by $x$ in any expression without
changing the value of the expression. Therefore, we usually eliminate such
occurrences unless something encourages us to leave them in.
#+end_documentation

doc:Distributive
#+begin_documentation Distributive :show t :color blue
An operation ⊗ distributes over ⊕ when they satisfy
“left-distributivity” $x ⊗ (y ⊕ z) = (x ⊗ y) ⊕ (x ⊗ y)$
and
“right-distributivity” $(y ⊕ z) ⊗ x = (y ⊗ x) ⊕ (z ⊗ x)$.

When ⊕ = ⊗, one says that the operation is “self-distributive”.

Distributivity can be viewed in two ways, much like distributivity of
multiplication × over addition +. Replacing the left side by the right side
could be called “multiplying out”; replacing the right side by the left side,
“factoring”.
#+end_documentation

doc:Programming
#+begin_documentation Programming :show t
Programming is solving the equation /R ⇒[C] G/ in the unknown /C/; i.e., it is the
activity of finding a ‘recipe’ that satisfies a given specification. Sometimes
we may write /R ⇒[?] G/ and solve for ‘?’. Programming is a goal-directed activity: From a specification, a program is found by examining the shape of its postcondition.
#+end_documentation

doc:Specification
#+begin_documentation Specification :show t :color blue
 A specification is an equation of a certain shape.
 /Programming/ is the activity of solving a specification
 for its unknown. Its unknown is called a /program/.

 See also “Programming”.
#+end_documentation

doc:Expression
#+begin_documentation Expression :show t

A ‘variable’ or a ‘function application’; i.e., the name of a function along
with a number of existing expressions.

In a sense, an expression is like a sentence with the variables acting as
pronouns and the function applications acting as verb clauses and the argument
to the application are the participants in the action of the verbal clause.
#+end_documentation

doc:Algorithmic_Problem_Solving
#+begin_documentation Algorithmic Problem Solving :show t :color blue
There are two ways to read this phrase.

Algorithmic-problem solving is about solving problems that
involve the construction of an algorithm for their solution.

Algorithmic problem-solving is about problem solving in general,
using the principles of correct-by-construction algorithm-design.

#+end_documentation
# Computing science is all about solving algorithmic problems (or, as some
# authors pre- fer to say, it is all about instructing computers to solve
# problems).

doc:Calculational_Proof
#+begin_documentation Calculational Proof :show t
A story whose events have smooth transitions connecting them.

A proof wherein each step is connected to the next step by an explicit
justification.
#+end_documentation

doc:nat-trans
#+begin_documentation Natural Transformation :label (nat-trans polymorphism) :show t :color blue
Natural transformations are essentially polymorphic functions that make /no/
choices according to the input type; e.g., =reverse : List τ → List τ= makes no
choices depending on the type ~τ~.
#+end_documentation

doc:cat
#+begin_documentation Category Theory :label cat :show t
A theory of typed  composition; e.g., typed monoids.
#+end_documentation
